{
	"id": "88bf7650dd068ba17c5fa49103a508c0",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"Bulksender.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title RainDrop\n/// @notice Send ETH or ERC20 tokens to many recipients in one tx.\n/// @dev ERC20 bulk transfer uses transferFrom, so users must approve this contract first.\ncontract RainDrop is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    event BulkETHTransferred(address indexed sender, uint256 total, uint256 recipientsCount);\n    event BulkERC20Transferred(address indexed token, address indexed sender, uint256 total, uint256 recipientsCount);\n    event ETHWithdrawn(address indexed to, uint256 amount);\n    event ERC20Withdrawn(address indexed token, address indexed to, uint256 amount);\n\n\n\n    constructor() Ownable(msg.sender) {\n}\n    /// @notice Batch-send ETH to many recipients.\n    /// @param recipients Array of recipient addresses.\n    /// @param amounts Array of amounts corresponding to each recipient (in wei).\n    /// Requirements:\n    /// - `recipients.length == amounts.length`\n    /// - sum(amounts) must equal msg.value\n    function bulkTransferETH(address[] calldata recipients, uint256[] calldata amounts)\n        external\n        payable\n        nonReentrant\n    {\n        uint256 n = recipients.length;\n        require(n == amounts.length, \"length-mismatch\");\n        uint256 total = 0;\n\n        // calculate total\n        for (uint256 i = 0; i < n; ++i) {\n            total += amounts[i];\n        }\n\n        require(total == msg.value, \"value-mismatch\");\n\n        // send funds\n        for (uint256 i = 0; i < n; ++i) {\n            (bool ok, ) = recipients[i].call{value: amounts[i]}(\"\");\n            require(ok, \"eth-send-failed\");\n        }\n\n        emit BulkETHTransferred(msg.sender, total, n);\n    }\n\n    /// @notice Batch-send ERC20 tokens to many recipients using transferFrom.\n    /// @param token ERC20 token contract.\n    /// @param recipients Array of recipient addresses.\n    /// @param amounts Array of amounts corresponding to each recipient (in token units).\n    /// Requirements:\n    /// - caller must approve this contract for at least sum(amounts) before calling.\n    function bulkTransferERC20(\n        IERC20 token,\n        address[] calldata recipients,\n        uint256[] calldata amounts\n    ) external nonReentrant {\n        uint256 n = recipients.length;\n        require(n == amounts.length, \"length-mismatch\");\n\n        uint256 total = 0;\n        for (uint256 i = 0; i < n; ++i) {\n            total += amounts[i];\n        }\n\n        // transferFrom caller -> recipients[i]\n        for (uint256 i = 0; i < n; ++i) {\n            token.safeTransferFrom(msg.sender, recipients[i], amounts[i]);\n        }\n\n        emit BulkERC20Transferred(address(token), msg.sender, total, n);\n    }\n\n    /// @notice Owner-only: send ERC20 tokens that are already held by this contract to recipients.\n    function bulkTransferERC20FromContract(\n        IERC20 token,\n        address[] calldata recipients,\n        uint256[] calldata amounts\n    ) external onlyOwner nonReentrant {\n        uint256 n = recipients.length;\n        require(n == amounts.length, \"length-mismatch\");\n\n        uint256 total = 0;\n        for (uint256 i = 0; i < n; ++i) {\n            total += amounts[i];\n        }\n\n        uint256 contractBal = token.balanceOf(address(this));\n        require(contractBal >= total, \"insufficient-contract-balance\");\n\n        for (uint256 i = 0; i < n; ++i) {\n            token.safeTransfer(recipients[i], amounts[i]);\n        }\n\n        emit BulkERC20Transferred(address(token), address(this), total, n);\n    }\n\n    /// @notice Owner helper: withdraw ETH accidentally left in the contract.\n    function withdrawETH(address payable to, uint256 amount) external onlyOwner nonReentrant {\n        require(address(this).balance >= amount, \"insufficient-eth\");\n        (bool ok, ) = to.call{value: amount}(\"\");\n        require(ok, \"withdraw-failed\");\n        emit ETHWithdrawn(to, amount);\n    }\n\n    /// @notice Owner helper: withdraw ERC20 tokens from the contract.\n    function withdrawERC20(IERC20 token, address to, uint256 amount) external onlyOwner nonReentrant {\n        token.safeTransfer(to, amount);\n        emit ERC20Withdrawn(address(token), to, amount);\n    }\n\n    // allow contract to receive ETH\n    receive() external payable {}\n    fallback() external payable {}\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
			},
			"@openzeppelin/contracts/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"IERC1363": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"approveAndCall(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"approveAndCall(address,uint256,bytes)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `spender`.",
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferAndCall(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferAndCall(address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFromAndCall(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFromAndCall(address,address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							}
						},
						"title": "IERC1363",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"approveAndCall(address,uint256)": "3177029f",
							"approveAndCall(address,uint256,bytes)": "cae9ca51",
							"balanceOf(address)": "70a08231",
							"supportsInterface(bytes4)": "01ffc9a7",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAndCall(address,uint256)": "1296ee62",
							"transferAndCall(address,uint256,bytes)": "4000aea0",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferFromAndCall(address,address,uint256)": "d8fbe994",
							"transferFromAndCall(address,address,uint256,bytes)": "c1d34b89"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 248,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":698:10074  library SafeERC20 {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":698:10074  library SafeERC20 {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0xFDC9AC7DCDE7D0D9E24A3DAE CREATE2 PUSH0 0xE1 0xE4 0xD0 MLOAD SHL AND DUP7 0x4F LOG1 PC CALLDATALOAD 0xCB 0xA9 BLOCKHASH 0x2B 0xD7 SLOAD PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "698:9376:6:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH12 0xFDC9AC7DCDE7D0D9E24A3DAE CREATE2 PUSH0 0xE1 0xE4 0xD0 MLOAD SHL AND DUP7 0x4F LOG1 PC CALLDATALOAD 0xCB 0xA9 BLOCKHASH 0x2B 0xD7 SLOAD PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "698:9376:6:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite",
								"transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)": "infinite",
								"trySafeTransfer(contract IERC20,address,uint256)": "infinite",
								"trySafeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "ASSIGNIMMUTABLE",
									"source": 6,
									"value": "library_deploy_address"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "RETURN",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "REVERT",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206bfdc9ac7dcde7d0d9e24a3daef55fe1e4d0511b16864fa15835cba9402bd75464736f6c634300081a0033",
									".code": [
										{
											"begin": 698,
											"end": 10074,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"Bulksender.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"Bulksender.sol": {
				"RainDrop": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "total",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "recipientsCount",
									"type": "uint256"
								}
							],
							"name": "BulkERC20Transferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "total",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "recipientsCount",
									"type": "uint256"
								}
							],
							"name": "BulkETHTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "ERC20Withdrawn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "ETHWithdrawn",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"stateMutability": "payable",
							"type": "fallback"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "recipients",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"name": "bulkTransferERC20",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "recipients",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"name": "bulkTransferERC20FromContract",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "recipients",
									"type": "address[]"
								},
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"name": "bulkTransferETH",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdrawERC20",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address payable",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdrawETH",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"devdoc": {
						"details": "ERC20 bulk transfer uses transferFrom, so users must approve this contract first.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"bulkTransferERC20(address,address[],uint256[])": {
								"params": {
									"amounts": "Array of amounts corresponding to each recipient (in token units). Requirements: - caller must approve this contract for at least sum(amounts) before calling.",
									"recipients": "Array of recipient addresses.",
									"token": "ERC20 token contract."
								}
							},
							"bulkTransferETH(address[],uint256[])": {
								"params": {
									"amounts": "Array of amounts corresponding to each recipient (in wei). Requirements: - `recipients.length == amounts.length` - sum(amounts) must equal msg.value",
									"recipients": "Array of recipient addresses."
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"title": "RainDrop",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n    /* \"Bulksender.sol\":944:954  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  iszero\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_3\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1298  0 */\n  0x00\n    /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n  dup1\n  sload\n    /* \"Bulksender.sol\":944:954  msg.sender */\n  caller\n  not(sub(shl(0xa0, 0x01), 0x01))\n    /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n  dup3\n  and\n  dup2\n  or\n  dup4\n  sstore\n    /* \"Bulksender.sol\":944:954  msg.sender */\n  swap2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n  swap1\n  swap2\n  and\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1298  0 */\n  dup1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n  0x01\n  dup1\n  sstore\n    /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_3:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  shl(0xe0, 0x1e4fbdf7)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1298  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1298  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  0x04\n    /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n  mstore\n  0x24\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1298  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  revert\n    /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_14, iszero(lt(calldatasize, 0x04)))\n    tag_15:\n      jumpi(tag_16, iszero(calldatasize))\n      stop\n    tag_16:\n      stop\n    tag_14:\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x3e46cd53\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x44004cc1\n      eq\n      tag_20\n      jumpi\n      dup1\n      0x4782f779\n      eq\n      tag_22\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_24\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_26\n      jumpi\n      dup1\n      0x9f62eafe\n      eq\n      tag_28\n      jumpi\n      dup1\n      0xb874fa6a\n      eq\n      tag_30\n      jumpi\n      0xf2fde38b\n      sub\n      tag_15\n      jumpi\n      jumpi(tag_36, callvalue)\n      jumpi(tag_36, slt(add(not(0x03), calldatasize), 0x20))\n      tag_38\n      tag_1\n      jump\t// in\n    tag_38:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_39\n      tag_11\n      jump\t// in\n    tag_39:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_40\n      jumpi\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      dup4\n      or\n      dup3\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      shl(0xe0, 0x1e4fbdf7)\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mstore\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mstore(0x04, 0x00)\n      0x24\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      revert\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n    tag_36:\n      0x00\n      dup1\n      revert\n    tag_30:\n      jumpi(tag_36, slt(add(not(0x03), calldatasize), 0x40))\n      calldataload(0x04)\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_36\n      jumpi\n      tag_46\n      swap1\n      calldatasize\n      swap1\n      0x04\n      add\n      tag_2\n      jump\t// in\n    tag_46:\n      calldataload(0x24)\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_36\n      jumpi\n      tag_49\n      swap1\n      calldatasize\n      swap1\n      0x04\n      add\n      tag_2\n      jump\t// in\n    tag_49:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      swap3\n      swap1\n      tag_50\n      tag_10\n      jump\t// in\n    tag_50:\n        /* \"Bulksender.sol\":1458:1505  require(n == amounts.length, \"length-mismatch\") */\n      tag_51\n        /* \"Bulksender.sol\":1466:1485  n == amounts.length */\n      dup5\n      dup5\n      eq\n        /* \"Bulksender.sol\":1458:1505  require(n == amounts.length, \"length-mismatch\") */\n      tag_4\n      jump\t// in\n    tag_51:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Bulksender.sol\":1575:1588  uint256 i = 0 */\n      swap4\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Bulksender.sol\":1590:1595  i < n */\n    tag_52:\n      dup5\n      dup2\n      lt\n      tag_53\n      jumpi\n        /* \"Bulksender.sol\":1673:1682  msg.value */\n      pop\n      callvalue\n        /* \"Bulksender.sol\":1664:1682  total == msg.value */\n      dup6\n      sub\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      tag_55\n      jumpi\n      0x00\n        /* \"Bulksender.sol\":1754:1759  i < n */\n    tag_57:\n      dup5\n      dup2\n      lt\n      tag_58\n      jumpi\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      dup6\n      dup6\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n        /* \"Bulksender.sol\":1905:1945  BulkETHTransferred(msg.sender, total, n) */\n      0x45d6845dd4f0bdd735a522e3076f82702e80547a0e2b1304a2e483bca6d9cdc4\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x40\n        /* \"Bulksender.sol\":1924:1934  msg.sender */\n      caller\n        /* \"Bulksender.sol\":1905:1945  BulkETHTransferred(msg.sender, total, n) */\n      swap3\n      log2\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup1\n      sstore\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      stop\n        /* \"Bulksender.sol\":1761:1764  ++i */\n    tag_58:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Bulksender.sol\":1794:1807  recipients[i] */\n      dup1\n      dup1\n      dup1\n      tag_60\n      tag_61\n      dup7\n      dup12\n      dup12\n      tag_5\n      jump\t// in\n    tag_61:\n      tag_7\n      jump\t// in\n    tag_60:\n        /* \"Bulksender.sol\":1820:1830  amounts[i] */\n      tag_62\n      dup7\n      dup9\n      dup11\n      tag_5\n      jump\t// in\n    tag_62:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      calldataload\n        /* \"Bulksender.sol\":1794:1835  recipients[i].call{value: amounts[i]}(\"\") */\n      swap1\n      gas\n      call\n      tag_63\n      tag_9\n      jump\t// in\n    tag_63:\n      pop\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      iszero\n      tag_64\n      jumpi\n      0x01\n      add\n        /* \"Bulksender.sol\":1739:1752  uint256 i = 0 */\n      jump(tag_57)\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n    tag_64:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0f\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x8a, 0x195d1a0b5cd95b990b59985a5b1959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_55:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x93, 0x0ecc2d8eaca5adad2e6dac2e8c6d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"Bulksender.sol\":1597:1600  ++i */\n    tag_53:\n        /* \"Bulksender.sol\":1625:1635  amounts[i] */\n      swap5\n        /* \"Bulksender.sol\":1616:1635  total += amounts[i] */\n      tag_66\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"Bulksender.sol\":1625:1635  amounts[i] */\n      swap2\n      tag_67\n      dup9\n      dup6\n      dup8\n      tag_5\n      jump\t// in\n    tag_67:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      calldataload\n        /* \"Bulksender.sol\":1616:1635  total += amounts[i] */\n      swap1\n      tag_6\n      jump\t// in\n    tag_66:\n        /* \"Bulksender.sol\":1597:1600  ++i */\n      swap6\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      add\n        /* \"Bulksender.sol\":1575:1588  uint256 i = 0 */\n      jump(tag_52)\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n    tag_28:\n      jumpi(tag_36, callvalue)\n      tag_70\n      calldatasize\n      tag_3\n      jump\t// in\n    tag_70:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      swap3\n      swap1\n      swap4\n      tag_71\n      tag_11\n      jump\t// in\n    tag_71:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_72\n      tag_10\n      jump\t// in\n    tag_72:\n        /* \"Bulksender.sol\":3281:3328  require(n == amounts.length, \"length-mismatch\") */\n      tag_73\n        /* \"Bulksender.sol\":3289:3308  n == amounts.length */\n      dup5\n      dup5\n      eq\n        /* \"Bulksender.sol\":3281:3328  require(n == amounts.length, \"length-mismatch\") */\n      tag_4\n      jump\t// in\n    tag_73:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Bulksender.sol\":3371:3384  uint256 i = 0 */\n      swap5\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Bulksender.sol\":3386:3391  i < n */\n    tag_74:\n      dup5\n      dup2\n      lt\n      tag_75\n      jumpi\n      pop\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n      dup2\n      mstore\n        /* \"Bulksender.sol\":3498:3502  this */\n      address\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x04\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n      dup3\n      add\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      and\n      swap6\n      swap1\n      0x20\n      dup2\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n      0x24\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      dup2\n      dup11\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n      gas\n      staticcall\n      dup1\n      iszero\n      tag_77\n      jumpi\n      dup9\n      swap2\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n      swap2\n      tag_79\n      jumpi\n        /* \"Bulksender.sol\":3366:3442  for (uint256 i = 0; i < n; ++i) {... */\n    tag_80:\n        /* \"Bulksender.sol\":3522:3542  contractBal >= total */\n      pop\n      lt\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      tag_81\n      jumpi\n      0x00\n        /* \"Bulksender.sol\":3607:3612  i < n */\n    tag_83:\n      dup6\n      dup2\n      lt\n      tag_84\n      jumpi\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      dup8\n      dup8\n      dup8\n      mload(0x40)\n      swap3\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      mstore\n        /* \"Bulksender.sol\":3704:3765  BulkERC20Transferred(address(token), address(this), total, n) */\n      0x8a88ad5eb4d4acfb8c47fcc9c5b0e66c5162ea704dd1e08cce235927434e18d2\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x40\n        /* \"Bulksender.sol\":3498:3502  this */\n      address\n        /* \"Bulksender.sol\":3704:3765  BulkERC20Transferred(address(token), address(this), total, n) */\n      swap4\n      log3\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup1\n      sstore\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      stop\n        /* \"Bulksender.sol\":3614:3617  ++i */\n    tag_84:\n        /* \"Bulksender.sol\":3652:3665  recipients[i] */\n      dup1\n        /* \"Bulksender.sol\":3667:3677  amounts[i] */\n      tag_86\n        /* \"Bulksender.sol\":3652:3665  recipients[i] */\n      tag_87\n      tag_61\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"Bulksender.sol\":3652:3665  recipients[i] */\n      swap5\n      dup11\n      dup11\n      tag_5\n      jump\t// in\n    tag_87:\n        /* \"Bulksender.sol\":3667:3677  amounts[i] */\n      tag_89\n      dup4\n      dup7\n      dup9\n      tag_5\n      jump\t// in\n    tag_89:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      calldataload\n        /* \"Bulksender.sol\":3667:3677  amounts[i] */\n      swap1\n      dup8\n      tag_12\n      jump\t// in\n    tag_86:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      add\n        /* \"Bulksender.sol\":3592:3605  uint256 i = 0 */\n      jump(tag_83)\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n    tag_81:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1d\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n      0x24\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      dup3\n      add\n      mstore\n      0x696e73756666696369656e742d636f6e74726163742d62616c616e6365000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n    tag_79:\n      swap2\n      pop\n      pop\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x20\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n      dup2\n      returndatasize\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x20\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n      gt\n      tag_90\n      jumpi\n    tag_91:\n      dup2\n      tag_92\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x20\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n      swap4\n      dup4\n      tag_8\n      jump\t// in\n    tag_92:\n      dup2\n      add\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      sub\n      slt\n      tag_36\n      jumpi\n      dup8\n      swap1\n      mload\n        /* \"Bulksender.sol\":3474:3504  token.balanceOf(address(this)) */\n      dup10\n      jump(tag_80)\n    tag_90:\n      returndatasize\n      swap2\n      pop\n      jump(tag_91)\n    tag_77:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"Bulksender.sol\":3393:3396  ++i */\n    tag_75:\n        /* \"Bulksender.sol\":3421:3431  amounts[i] */\n      swap6\n        /* \"Bulksender.sol\":3412:3431  total += amounts[i] */\n      tag_95\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"Bulksender.sol\":3421:3431  amounts[i] */\n      swap2\n      tag_67\n      dup10\n      dup10\n      dup7\n      tag_5\n      jump\t// in\n        /* \"Bulksender.sol\":3412:3431  total += amounts[i] */\n    tag_95:\n        /* \"Bulksender.sol\":3393:3396  ++i */\n      swap7\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      add\n        /* \"Bulksender.sol\":3371:3384  uint256 i = 0 */\n      jump(tag_74)\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n    tag_26:\n      jumpi(tag_36, callvalue)\n      jumpi(tag_36, slt(add(not(0x03), calldatasize), 0x00))\n      sload(0x00)\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_24:\n      jumpi(tag_36, callvalue)\n      jumpi(tag_36, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_105\n      tag_11\n      jump\t// in\n    tag_105:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      dup3\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      dup3\n      dup1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      stop\n    tag_22:\n      jumpi(tag_36, callvalue)\n      jumpi(tag_36, slt(add(not(0x03), calldatasize), 0x40))\n      calldataload(0x04)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      swap1\n      dup2\n      swap1\n      sub\n      tag_36\n      jumpi\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      tag_112\n      tag_11\n      jump\t// in\n    tag_112:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_113\n      tag_10\n      jump\t// in\n    tag_113:\n        /* \"Bulksender.sol\":3963:3984  address(this).balance */\n      dup1\n      selfbalance\n        /* \"Bulksender.sol\":3963:3994  address(this).balance >= amount */\n      lt\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      tag_114\n      jumpi\n      0x00\n        /* \"Bulksender.sol\":4039:4065  to.call{value: amount}(\"\") */\n      dup1\n      dup1\n      dup1\n      dup5\n      dup7\n      gas\n      call\n      tag_116\n      tag_9\n      jump\t// in\n    tag_116:\n      pop\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      iszero\n      tag_117\n      jumpi\n      0x20\n        /* \"Bulksender.sol\":4120:4144  ETHWithdrawn(to, amount) */\n      0x94b2de810873337ed265c5f8cf98c9cffefa06b8607f9a2f1fbaebdfbcfbef1c\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      swap2\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"Bulksender.sol\":4120:4144  ETHWithdrawn(to, amount) */\n      log2\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup1\n      sstore\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      stop\n    tag_117:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0f\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x8a, 0x1dda5d1a191c985dcb59985a5b1959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_114:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x10\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x83, 0x0d2dce6eaccccd2c6d2cadce85acae8d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_20:\n      jumpi(tag_36, callvalue)\n      jumpi(tag_36, slt(add(not(0x03), calldatasize), 0x60))\n      tag_123\n      tag_1\n      jump\t// in\n    tag_123:\n      calldataload(0x24)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      swap2\n      dup3\n      dup3\n      sub\n      tag_36\n      jumpi\n      0x20\n        /* \"Bulksender.sol\":4380:4422  ERC20Withdrawn(address(token), to, amount) */\n      0xbfed55bdcd242e3dd0f60ddd7d1e87c67f61c34cd9527b3e6455d841b1025362\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      swap2\n        /* \"Bulksender.sol\":4358:4364  amount */\n      tag_126\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      calldataload(0x44)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1500:1562  modifier onlyOwner() {... */\n      dup1\n      swap6\n      tag_127\n      tag_11\n      jump\t// in\n    tag_127:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_128\n      tag_10\n      jump\t// in\n    tag_128:\n        /* \"Bulksender.sol\":4358:4364  amount */\n      dup4\n      tag_12\n      jump\t// in\n    tag_126:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      swap4\n      dup5\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap3\n        /* \"Bulksender.sol\":4380:4422  ERC20Withdrawn(address(token), to, amount) */\n      log3\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup1\n      sstore\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      stop\n    tag_18:\n      jumpi(tag_36, callvalue)\n      tag_131\n      calldatasize\n      tag_3\n      jump\t// in\n    tag_131:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      swap3\n      swap1\n      tag_132\n      tag_10\n      jump\t// in\n    tag_132:\n        /* \"Bulksender.sol\":2535:2582  require(n == amounts.length, \"length-mismatch\") */\n      tag_133\n        /* \"Bulksender.sol\":2543:2562  n == amounts.length */\n      dup5\n      dup5\n      eq\n        /* \"Bulksender.sol\":2535:2582  require(n == amounts.length, \"length-mismatch\") */\n      tag_4\n      jump\t// in\n    tag_133:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Bulksender.sol\":2625:2638  uint256 i = 0 */\n      swap4\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Bulksender.sol\":2640:2645  i < n */\n    tag_134:\n      dup5\n      dup2\n      lt\n      tag_135\n      jumpi\n        /* \"Bulksender.sol\":2759:2772  uint256 i = 0 */\n      pop\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x00\n        /* \"Bulksender.sol\":2774:2779  i < n */\n    tag_137:\n      dup5\n      dup2\n      lt\n      tag_138\n      jumpi\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      dup3\n      add\n      mstore\n        /* \"Bulksender.sol\":2887:2945  BulkERC20Transferred(address(token), msg.sender, total, n) */\n      0x8a88ad5eb4d4acfb8c47fcc9c5b0e66c5162ea704dd1e08cce235927434e18d2\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x40\n        /* \"Bulksender.sol\":2823:2833  msg.sender */\n      caller\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      swap4\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n        /* \"Bulksender.sol\":2887:2945  BulkERC20Transferred(address(token), msg.sender, total, n) */\n      swap3\n      log3\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup1\n      sstore\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      stop\n        /* \"Bulksender.sol\":2781:2784  ++i */\n    tag_138:\n        /* \"Bulksender.sol\":2835:2848  recipients[i] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      tag_140\n        /* \"Bulksender.sol\":2835:2848  recipients[i] */\n      tag_141\n      tag_61\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"Bulksender.sol\":2835:2848  recipients[i] */\n      swap5\n      dup10\n      dup10\n      tag_5\n      jump\t// in\n    tag_141:\n        /* \"Bulksender.sol\":2850:2860  amounts[i] */\n      tag_143\n      dup4\n      dup7\n      dup9\n      tag_5\n      jump\t// in\n    tag_143:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      calldataload\n      mload(0x40)\n      swap2\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n      dup5\n      add\n      mstore\n        /* \"Bulksender.sol\":2823:2833  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x24\n      dup5\n      add\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mstore\n      dup6\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      0x44\n      dup4\n      add\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x64\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      dup3\n      add\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x64\n      dup2\n      mstore\n      tag_144\n      0x84\n      dup3\n      tag_8\n      jump\t// in\n    tag_144:\n      dup10\n      tag_13\n      jump\t// in\n    tag_140:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      add\n        /* \"Bulksender.sol\":2759:2772  uint256 i = 0 */\n      jump(tag_137)\n        /* \"Bulksender.sol\":2647:2650  ++i */\n    tag_135:\n        /* \"Bulksender.sol\":2675:2685  amounts[i] */\n      swap5\n        /* \"Bulksender.sol\":2666:2685  total += amounts[i] */\n      tag_145\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x01\n        /* \"Bulksender.sol\":2675:2685  amounts[i] */\n      swap2\n      tag_67\n      dup9\n      dup6\n      dup8\n      tag_5\n      jump\t// in\n        /* \"Bulksender.sol\":2666:2685  total += amounts[i] */\n    tag_145:\n        /* \"Bulksender.sol\":2647:2650  ++i */\n      swap6\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      add\n        /* \"Bulksender.sol\":2625:2638  uint256 i = 0 */\n      jump(tag_134)\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n    tag_1:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_36\n      jumpi\n      jump\t// out\n    tag_2:\n      swap2\n      dup2\n      0x1f\n      dup5\n      add\n      slt\n      iszero\n      tag_36\n      jumpi\n      dup3\n      calldataload\n      swap2\n      0xffffffffffffffff\n      dup4\n      gt\n      tag_36\n      jumpi\n      0x20\n      dup1\n      dup6\n      add\n      swap5\n      dup5\n      0x05\n      shl\n      add\n      add\n      gt\n      tag_36\n      jumpi\n      jump\t// out\n    tag_3:\n      swap1\n      0x60\n      not(0x03)\n      dup4\n      add\n      slt\n      tag_36\n      jumpi\n      calldataload(0x04)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_36\n      jumpi\n      swap2\n      calldataload(0x24)\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_36\n      jumpi\n      dup2\n      tag_161\n      swap2\n      0x04\n      add\n      tag_2\n      jump\t// in\n    tag_161:\n      swap3\n      swap1\n      swap3\n      swap2\n      calldataload(0x44)\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_36\n      jumpi\n      tag_164\n      swap2\n      0x04\n      add\n      tag_2\n      jump\t// in\n    tag_164:\n      swap1\n      swap2\n      jump\t// out\n    tag_4:\n      iszero\n      tag_165\n      jumpi\n      jump\t// out\n    tag_165:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0f\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x8b, 0x0d8cadccee8d05adad2e6dac2e8c6d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_5:\n      swap2\n      swap1\n      dup2\n      lt\n      iszero\n      tag_167\n      jumpi\n      0x05\n      shl\n      add\n      swap1\n      jump\t// out\n    tag_167:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_6:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_169\n      jumpi\n      jump\t// out\n    tag_169:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_7:\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_36\n      jumpi\n      swap1\n      jump\t// out\n    tag_8:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_173\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_173:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_9:\n      jumpi(tag_175, iszero(returndatasize))\n      returndatasize\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_173\n      jumpi\n      mload(0x40)\n      swap2\n      tag_179\n      0x1f\n      dup3\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup5\n      tag_8\n      jump\t// in\n    tag_179:\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump\t// out\n    tag_175:\n      0x60\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n    tag_10:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x01\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      eq\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      tag_181\n      jumpi\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n    tag_181:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      0x44\n      dup3\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_11:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      sub\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_183\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n    tag_183:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      shl(0xe0, 0x118cdaa7)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mstore\n      0x24\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1219:1379  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_12:\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      0x20\n      dup3\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      swap1\n      swap3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      0x24\n      dup4\n      add\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mstore\n      0x44\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      swap2\n      dup2\n      mstore\n      tag_185\n      swap2\n      tag_186\n      0x64\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      tag_8\n      jump\t// in\n    tag_186:\n      tag_13\n      jump\t// in\n    tag_185:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1219:1379  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_13:\n      swap1\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8507:8928  assembly (\"memory-safe\") {... */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8507:8928  assembly (\"memory-safe\") {... */\n      dup3\n      dup2\n      mload\n      swap2\n      add\n      dup3\n      dup6\n      gas\n      call\n      iszero\n      tag_77\n      jumpi\n      mload(0x00)\n      returndatasize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:8957  returnSize == 0 */\n      tag_189\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8960:8986  address(token).code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8960:8991  address(token).code.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n    tag_191:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8938:9084  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n      tag_192\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8938:9084  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n    tag_192:\n      shl(0xe0, 0x5274afe7)\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      swap1\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      0x04\n        /* \"Bulksender.sol\":476:4538  contract RainDrop is Ownable, ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n    tag_189:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9009:9010  1 */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8994:9010  returnValue != 1 */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n      jump(tag_191)\n\n    auxdata: 0xa264697066735822122007ca3ac050eaea03d45ea0c712b709b21f1a9713468c4e22cbbf6a49a3e7572864736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460755733156062575f8054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3600180556109f8908161007a8239f35b631e4fbdf760e01b5f525f60045260245ffd5b5f80fdfe60806040526004361015610018575b361561001657005b005b5f3560e01c80633e46cd53146105fa57806344004cc1146105735780634782f7791461047d578063715018a6146104265780638da5cb5b146103ff5780639f62eafe1461027c578063b874fa6a146100fd5763f2fde38b0361000e57346100f95760203660031901126100f95761008d6106f2565b610095610902565b6001600160a01b031680156100e6575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b60403660031901126100f95760043567ffffffffffffffff81116100f957610129903690600401610708565b60243567ffffffffffffffff81116100f957610149903690600401610708565b92906101536108ac565b61015e8484146107a0565b5f935f5b84811061025c5750348503610226575f5b8481106101b357858560405191825260208201527f45d6845dd4f0bdd735a522e3076f82702e80547a0e2b1304a2e483bca6d9cdc460403392a260018055005b5f8080806101ca6101c5868b8b6107de565b610823565b6101d586888a6107de565b35905af16101e161086d565b50156101ef57600101610173565b60405162461bcd60e51b815260206004820152600f60248201526e195d1a0b5cd95b990b59985a5b1959608a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d0ecc2d8eaca5adad2e6dac2e8c6d60931b6044820152606490fd5b9461027560019161026e8885876107de565b3590610802565b9501610162565b346100f95761028a36610739565b929093610295610902565b61029d6108ac565b6102a88484146107a0565b5f945f5b8481106103e657506040516370a0823160e01b81523060048201526001600160a01b03831695906020816024818a5afa80156103db5788915f916103a6575b5010610361575f5b8581106103345787878760405192835260208301527f8a88ad5eb4d4acfb8c47fcc9c5b0e66c5162ea704dd1e08cce235927434e18d260403093a360018055005b8061035b6103486101c56001948a8a6107de565b6103538386886107de565b359087610928565b016102f3565b60405162461bcd60e51b815260206004820152601d60248201527f696e73756666696369656e742d636f6e74726163742d62616c616e63650000006044820152606490fd5b9150506020813d6020116103d3575b816103c260209383610837565b810103126100f957879051896102eb565b3d91506103b5565b6040513d5f823e3d90fd5b956103f860019161026e8989866107de565b96016102ac565b346100f9575f3660031901126100f9575f546040516001600160a01b039091168152602090f35b346100f9575f3660031901126100f95761043e610902565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100f95760403660031901126100f9576004356001600160a01b038116908190036100f9576024356104ae610902565b6104b66108ac565b80471061053b575f80808084865af16104cd61086d565b50156105045760207f94b2de810873337ed265c5f8cf98c9cffefa06b8607f9a2f1fbaebdfbcfbef1c91604051908152a260018055005b60405162461bcd60e51b815260206004820152600f60248201526e1dda5d1a191c985dcb59985a5b1959608a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f0d2dce6eaccccd2c6d2cadce85acae8d60831b6044820152606490fd5b346100f95760603660031901126100f95761058c6106f2565b6024356001600160a01b038116918282036100f95760207fbfed55bdcd242e3dd0f60ddd7d1e87c67f61c34cd9527b3e6455d841b1025362916105e360443580956105d5610902565b6105dd6108ac565b83610928565b6040519384526001600160a01b031692a360018055005b346100f95761060836610739565b92906106126108ac565b61061d8484146107a0565b5f935f5b8481106106d957505f5b848110610676575050505060405191825260208201527f8a88ad5eb4d4acfb8c47fcc9c5b0e66c5162ea704dd1e08cce235927434e18d26040339360018060a01b031692a360018055005b806106d361068a6101c560019489896107de565b6106958386886107de565b35604051916323b872dd60e01b6020840152336024840152858060a01b031660448301526064820152606481526106cd608482610837565b8961096a565b0161062b565b946106eb60019161026e8885876107de565b9501610621565b600435906001600160a01b03821682036100f957565b9181601f840112156100f95782359167ffffffffffffffff83116100f9576020808501948460051b0101116100f957565b9060606003198301126100f9576004356001600160a01b03811681036100f9579160243567ffffffffffffffff81116100f9578161077991600401610708565b929092916044359067ffffffffffffffff82116100f95761079c91600401610708565b9091565b156107a757565b60405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d05adad2e6dac2e8c6d608b1b6044820152606490fd5b91908110156107ee5760051b0190565b634e487b7160e01b5f52603260045260245ffd5b9190820180921161080f57565b634e487b7160e01b5f52601160045260245ffd5b356001600160a01b03811681036100f95790565b90601f8019910116810190811067ffffffffffffffff82111761085957604052565b634e487b7160e01b5f52604160045260245ffd5b3d156108a7573d9067ffffffffffffffff8211610859576040519161089c601f8201601f191660200184610837565b82523d5f602084013e565b606090565b6002600154146108bd576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b5f546001600160a01b0316330361091557565b63118cdaa760e01b5f523360045260245ffd5b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815261096891610963606483610837565b61096a565b565b905f602091828151910182855af1156103db575f513d6109b957506001600160a01b0381163b155b6109995750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b6001141561099256fea264697066735822122007ca3ac050eaea03d45ea0c712b709b21f1a9713468c4e22cbbf6a49a3e7572864736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x75 JUMPI CALLER ISZERO PUSH1 0x62 JUMPI PUSH0 DUP1 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 PUSH1 0x1 DUP1 SSTORE PUSH2 0x9F8 SWAP1 DUP2 PUSH2 0x7A DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x18 JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x16 JUMPI STOP JUMPDEST STOP JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3E46CD53 EQ PUSH2 0x5FA JUMPI DUP1 PUSH4 0x44004CC1 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0x4782F779 EQ PUSH2 0x47D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x426 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3FF JUMPI DUP1 PUSH4 0x9F62EAFE EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0xB874FA6A EQ PUSH2 0xFD JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI CALLVALUE PUSH2 0xF9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH2 0x8D PUSH2 0x6F2 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xE6 JUMPI PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 STOP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF9 JUMPI PUSH2 0x129 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x708 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF9 JUMPI PUSH2 0x149 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x708 JUMP JUMPDEST SWAP3 SWAP1 PUSH2 0x153 PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x15E DUP5 DUP5 EQ PUSH2 0x7A0 JUMP JUMPDEST PUSH0 SWAP4 PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x25C JUMPI POP CALLVALUE DUP6 SUB PUSH2 0x226 JUMPI PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x1B3 JUMPI DUP6 DUP6 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x45D6845DD4F0BDD735A522E3076F82702E80547A0E2B1304A2E483BCA6D9CDC4 PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH0 DUP1 DUP1 DUP1 PUSH2 0x1CA PUSH2 0x1C5 DUP7 DUP12 DUP12 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x823 JUMP JUMPDEST PUSH2 0x1D5 DUP7 DUP9 DUP11 PUSH2 0x7DE JUMP JUMPDEST CALLDATALOAD SWAP1 GAS CALL PUSH2 0x1E1 PUSH2 0x86D JUMP JUMPDEST POP ISZERO PUSH2 0x1EF JUMPI PUSH1 0x1 ADD PUSH2 0x173 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x195D1A0B5CD95B990B59985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0xECC2D8EACA5ADAD2E6DAC2E8C6D PUSH1 0x93 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP5 PUSH2 0x275 PUSH1 0x1 SWAP2 PUSH2 0x26E DUP9 DUP6 DUP8 PUSH2 0x7DE JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x802 JUMP JUMPDEST SWAP6 ADD PUSH2 0x162 JUMP JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH2 0x28A CALLDATASIZE PUSH2 0x739 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH2 0x295 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x29D PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x2A8 DUP5 DUP5 EQ PUSH2 0x7A0 JUMP JUMPDEST PUSH0 SWAP5 PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x3E6 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP6 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP11 GAS STATICCALL DUP1 ISZERO PUSH2 0x3DB JUMPI DUP9 SWAP2 PUSH0 SWAP2 PUSH2 0x3A6 JUMPI JUMPDEST POP LT PUSH2 0x361 JUMPI PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x334 JUMPI DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x8A88AD5EB4D4ACFB8C47FCC9C5B0E66C5162EA704DD1E08CCE235927434E18D2 PUSH1 0x40 ADDRESS SWAP4 LOG3 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST DUP1 PUSH2 0x35B PUSH2 0x348 PUSH2 0x1C5 PUSH1 0x1 SWAP5 DUP11 DUP11 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x353 DUP4 DUP7 DUP9 PUSH2 0x7DE JUMP JUMPDEST CALLDATALOAD SWAP1 DUP8 PUSH2 0x928 JUMP JUMPDEST ADD PUSH2 0x2F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E742D636F6E74726163742D62616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x3D3 JUMPI JUMPDEST DUP2 PUSH2 0x3C2 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x837 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF9 JUMPI DUP8 SWAP1 MLOAD DUP10 PUSH2 0x2EB JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x3B5 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP6 PUSH2 0x3F8 PUSH1 0x1 SWAP2 PUSH2 0x26E DUP10 DUP10 DUP7 PUSH2 0x7DE JUMP JUMPDEST SWAP7 ADD PUSH2 0x2AC JUMP JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH2 0x43E PUSH2 0x902 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xF9 JUMPI PUSH1 0x24 CALLDATALOAD PUSH2 0x4AE PUSH2 0x902 JUMP JUMPDEST PUSH2 0x4B6 PUSH2 0x8AC JUMP JUMPDEST DUP1 SELFBALANCE LT PUSH2 0x53B JUMPI PUSH0 DUP1 DUP1 DUP1 DUP5 DUP7 GAS CALL PUSH2 0x4CD PUSH2 0x86D JUMP JUMPDEST POP ISZERO PUSH2 0x504 JUMPI PUSH1 0x20 PUSH32 0x94B2DE810873337ED265C5F8CF98C9CFFEFA06B8607F9A2F1FBAEBDFBCFBEF1C SWAP2 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1DDA5D1A191C985DCB59985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0xD2DCE6EACCCCD2C6D2CADCE85ACAE8D PUSH1 0x83 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH2 0x58C PUSH2 0x6F2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 DUP3 DUP3 SUB PUSH2 0xF9 JUMPI PUSH1 0x20 PUSH32 0xBFED55BDCD242E3DD0F60DDD7D1E87C67F61C34CD9527B3E6455D841B1025362 SWAP2 PUSH2 0x5E3 PUSH1 0x44 CALLDATALOAD DUP1 SWAP6 PUSH2 0x5D5 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x5DD PUSH2 0x8AC JUMP JUMPDEST DUP4 PUSH2 0x928 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 LOG3 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH2 0x608 CALLDATASIZE PUSH2 0x739 JUMP JUMPDEST SWAP3 SWAP1 PUSH2 0x612 PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x61D DUP5 DUP5 EQ PUSH2 0x7A0 JUMP JUMPDEST PUSH0 SWAP4 PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x6D9 JUMPI POP PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x676 JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x8A88AD5EB4D4ACFB8C47FCC9C5B0E66C5162EA704DD1E08CCE235927434E18D2 PUSH1 0x40 CALLER SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 LOG3 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST DUP1 PUSH2 0x6D3 PUSH2 0x68A PUSH2 0x1C5 PUSH1 0x1 SWAP5 DUP10 DUP10 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x695 DUP4 DUP7 DUP9 PUSH2 0x7DE JUMP JUMPDEST CALLDATALOAD PUSH1 0x40 MLOAD SWAP2 PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP5 ADD MSTORE CALLER PUSH1 0x24 DUP5 ADD MSTORE DUP6 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x64 DUP2 MSTORE PUSH2 0x6CD PUSH1 0x84 DUP3 PUSH2 0x837 JUMP JUMPDEST DUP10 PUSH2 0x96A JUMP JUMPDEST ADD PUSH2 0x62B JUMP JUMPDEST SWAP5 PUSH2 0x6EB PUSH1 0x1 SWAP2 PUSH2 0x26E DUP9 DUP6 DUP8 PUSH2 0x7DE JUMP JUMPDEST SWAP6 ADD PUSH2 0x621 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF9 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xF9 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xF9 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0xF9 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0xF9 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xF9 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF9 JUMPI DUP2 PUSH2 0x779 SWAP2 PUSH1 0x4 ADD PUSH2 0x708 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xF9 JUMPI PUSH2 0x79C SWAP2 PUSH1 0x4 ADD PUSH2 0x708 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST ISZERO PUSH2 0x7A7 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0xD8CADCCEE8D05ADAD2E6DAC2E8C6D PUSH1 0x8B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x7EE JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x80F JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xF9 JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x859 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x8A7 JUMPI RETURNDATASIZE SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x859 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x89C PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x837 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ PUSH2 0x8BD JUMPI PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x915 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x968 SWAP2 PUSH2 0x963 PUSH1 0x64 DUP4 PUSH2 0x837 JUMP JUMPDEST PUSH2 0x96A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0x3DB JUMPI PUSH0 MLOAD RETURNDATASIZE PUSH2 0x9B9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0x999 JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x992 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SMOD 0xCA GASPRICE 0xC0 POP 0xEA 0xEA SUB 0xD4 MCOPY LOG0 0xC7 SLT 0xB7 MULMOD 0xB2 0x1F BYTE SWAP8 SGT CHAINID DUP13 0x4E 0x22 0xCB 0xBF PUSH11 0x49A3E7572864736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "476:4062:9:-:0;;;;;;;944:10;1273:26:0;1269:95;;1297:1;476:4062:9;;944:10;-1:-1:-1;;;;;;476:4062:9;;;;;;944:10;-1:-1:-1;;;;;476:4062:9;;;;3052:40:0;;1297:1;3052:40;1716:1:4;;;476:4062:9;;;;;;;1269:95:0;1322:31;;;1297:1;1322:31;1297:1;1322:31;476:4062:9;;1297:1:0;1322:31;476:4062:9;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_array_address_dyn_calldata": {
									"entryPoint": 1800,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_contract_IERC20": {
									"entryPoint": 1778,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_contract_IERC20t_array_address_dyn_calldatat_array_uint256_dyn_calldata": {
									"entryPoint": 1849,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 5
								},
								"calldata_array_index_access_uint256_dyn_calldata": {
									"entryPoint": 2014,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 2050,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_returndata": {
									"entryPoint": 2157,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 2103,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_callOptionalReturn": {
									"entryPoint": 2410,
									"id": 802,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_checkOwner": {
									"entryPoint": 2306,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_nonReentrantBefore": {
									"entryPoint": 2220,
									"id": 282,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_safeTransfer": {
									"entryPoint": 2344,
									"id": 425,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"read_from_calldatat_address": {
									"entryPoint": 2083,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"require_helper_stringliteral_de8e": {
									"entryPoint": 1952,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361015610018575b361561001657005b005b5f3560e01c80633e46cd53146105fa57806344004cc1146105735780634782f7791461047d578063715018a6146104265780638da5cb5b146103ff5780639f62eafe1461027c578063b874fa6a146100fd5763f2fde38b0361000e57346100f95760203660031901126100f95761008d6106f2565b610095610902565b6001600160a01b031680156100e6575f80546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b5f525f60045260245ffd5b5f80fd5b60403660031901126100f95760043567ffffffffffffffff81116100f957610129903690600401610708565b60243567ffffffffffffffff81116100f957610149903690600401610708565b92906101536108ac565b61015e8484146107a0565b5f935f5b84811061025c5750348503610226575f5b8481106101b357858560405191825260208201527f45d6845dd4f0bdd735a522e3076f82702e80547a0e2b1304a2e483bca6d9cdc460403392a260018055005b5f8080806101ca6101c5868b8b6107de565b610823565b6101d586888a6107de565b35905af16101e161086d565b50156101ef57600101610173565b60405162461bcd60e51b815260206004820152600f60248201526e195d1a0b5cd95b990b59985a5b1959608a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d0ecc2d8eaca5adad2e6dac2e8c6d60931b6044820152606490fd5b9461027560019161026e8885876107de565b3590610802565b9501610162565b346100f95761028a36610739565b929093610295610902565b61029d6108ac565b6102a88484146107a0565b5f945f5b8481106103e657506040516370a0823160e01b81523060048201526001600160a01b03831695906020816024818a5afa80156103db5788915f916103a6575b5010610361575f5b8581106103345787878760405192835260208301527f8a88ad5eb4d4acfb8c47fcc9c5b0e66c5162ea704dd1e08cce235927434e18d260403093a360018055005b8061035b6103486101c56001948a8a6107de565b6103538386886107de565b359087610928565b016102f3565b60405162461bcd60e51b815260206004820152601d60248201527f696e73756666696369656e742d636f6e74726163742d62616c616e63650000006044820152606490fd5b9150506020813d6020116103d3575b816103c260209383610837565b810103126100f957879051896102eb565b3d91506103b5565b6040513d5f823e3d90fd5b956103f860019161026e8989866107de565b96016102ac565b346100f9575f3660031901126100f9575f546040516001600160a01b039091168152602090f35b346100f9575f3660031901126100f95761043e610902565b5f80546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100f95760403660031901126100f9576004356001600160a01b038116908190036100f9576024356104ae610902565b6104b66108ac565b80471061053b575f80808084865af16104cd61086d565b50156105045760207f94b2de810873337ed265c5f8cf98c9cffefa06b8607f9a2f1fbaebdfbcfbef1c91604051908152a260018055005b60405162461bcd60e51b815260206004820152600f60248201526e1dda5d1a191c985dcb59985a5b1959608a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f0d2dce6eaccccd2c6d2cadce85acae8d60831b6044820152606490fd5b346100f95760603660031901126100f95761058c6106f2565b6024356001600160a01b038116918282036100f95760207fbfed55bdcd242e3dd0f60ddd7d1e87c67f61c34cd9527b3e6455d841b1025362916105e360443580956105d5610902565b6105dd6108ac565b83610928565b6040519384526001600160a01b031692a360018055005b346100f95761060836610739565b92906106126108ac565b61061d8484146107a0565b5f935f5b8481106106d957505f5b848110610676575050505060405191825260208201527f8a88ad5eb4d4acfb8c47fcc9c5b0e66c5162ea704dd1e08cce235927434e18d26040339360018060a01b031692a360018055005b806106d361068a6101c560019489896107de565b6106958386886107de565b35604051916323b872dd60e01b6020840152336024840152858060a01b031660448301526064820152606481526106cd608482610837565b8961096a565b0161062b565b946106eb60019161026e8885876107de565b9501610621565b600435906001600160a01b03821682036100f957565b9181601f840112156100f95782359167ffffffffffffffff83116100f9576020808501948460051b0101116100f957565b9060606003198301126100f9576004356001600160a01b03811681036100f9579160243567ffffffffffffffff81116100f9578161077991600401610708565b929092916044359067ffffffffffffffff82116100f95761079c91600401610708565b9091565b156107a757565b60405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d05adad2e6dac2e8c6d608b1b6044820152606490fd5b91908110156107ee5760051b0190565b634e487b7160e01b5f52603260045260245ffd5b9190820180921161080f57565b634e487b7160e01b5f52601160045260245ffd5b356001600160a01b03811681036100f95790565b90601f8019910116810190811067ffffffffffffffff82111761085957604052565b634e487b7160e01b5f52604160045260245ffd5b3d156108a7573d9067ffffffffffffffff8211610859576040519161089c601f8201601f191660200184610837565b82523d5f602084013e565b606090565b6002600154146108bd576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b5f546001600160a01b0316330361091557565b63118cdaa760e01b5f523360045260245ffd5b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815261096891610963606483610837565b61096a565b565b905f602091828151910182855af1156103db575f513d6109b957506001600160a01b0381163b155b6109995750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b6001141561099256fea264697066735822122007ca3ac050eaea03d45ea0c712b709b21f1a9713468c4e22cbbf6a49a3e7572864736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x18 JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x16 JUMPI STOP JUMPDEST STOP JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3E46CD53 EQ PUSH2 0x5FA JUMPI DUP1 PUSH4 0x44004CC1 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0x4782F779 EQ PUSH2 0x47D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x426 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3FF JUMPI DUP1 PUSH4 0x9F62EAFE EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0xB874FA6A EQ PUSH2 0xFD JUMPI PUSH4 0xF2FDE38B SUB PUSH2 0xE JUMPI CALLVALUE PUSH2 0xF9 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH2 0x8D PUSH2 0x6F2 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x902 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xE6 JUMPI PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 STOP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF9 JUMPI PUSH2 0x129 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x708 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF9 JUMPI PUSH2 0x149 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x708 JUMP JUMPDEST SWAP3 SWAP1 PUSH2 0x153 PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x15E DUP5 DUP5 EQ PUSH2 0x7A0 JUMP JUMPDEST PUSH0 SWAP4 PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x25C JUMPI POP CALLVALUE DUP6 SUB PUSH2 0x226 JUMPI PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x1B3 JUMPI DUP6 DUP6 PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x45D6845DD4F0BDD735A522E3076F82702E80547A0E2B1304A2E483BCA6D9CDC4 PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH0 DUP1 DUP1 DUP1 PUSH2 0x1CA PUSH2 0x1C5 DUP7 DUP12 DUP12 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x823 JUMP JUMPDEST PUSH2 0x1D5 DUP7 DUP9 DUP11 PUSH2 0x7DE JUMP JUMPDEST CALLDATALOAD SWAP1 GAS CALL PUSH2 0x1E1 PUSH2 0x86D JUMP JUMPDEST POP ISZERO PUSH2 0x1EF JUMPI PUSH1 0x1 ADD PUSH2 0x173 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x195D1A0B5CD95B990B59985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0xECC2D8EACA5ADAD2E6DAC2E8C6D PUSH1 0x93 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP5 PUSH2 0x275 PUSH1 0x1 SWAP2 PUSH2 0x26E DUP9 DUP6 DUP8 PUSH2 0x7DE JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x802 JUMP JUMPDEST SWAP6 ADD PUSH2 0x162 JUMP JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH2 0x28A CALLDATASIZE PUSH2 0x739 JUMP JUMPDEST SWAP3 SWAP1 SWAP4 PUSH2 0x295 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x29D PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x2A8 DUP5 DUP5 EQ PUSH2 0x7A0 JUMP JUMPDEST PUSH0 SWAP5 PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x3E6 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP6 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 DUP11 GAS STATICCALL DUP1 ISZERO PUSH2 0x3DB JUMPI DUP9 SWAP2 PUSH0 SWAP2 PUSH2 0x3A6 JUMPI JUMPDEST POP LT PUSH2 0x361 JUMPI PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x334 JUMPI DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x8A88AD5EB4D4ACFB8C47FCC9C5B0E66C5162EA704DD1E08CCE235927434E18D2 PUSH1 0x40 ADDRESS SWAP4 LOG3 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST DUP1 PUSH2 0x35B PUSH2 0x348 PUSH2 0x1C5 PUSH1 0x1 SWAP5 DUP11 DUP11 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x353 DUP4 DUP7 DUP9 PUSH2 0x7DE JUMP JUMPDEST CALLDATALOAD SWAP1 DUP8 PUSH2 0x928 JUMP JUMPDEST ADD PUSH2 0x2F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x696E73756666696369656E742D636F6E74726163742D62616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x3D3 JUMPI JUMPDEST DUP2 PUSH2 0x3C2 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x837 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xF9 JUMPI DUP8 SWAP1 MLOAD DUP10 PUSH2 0x2EB JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x3B5 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP6 PUSH2 0x3F8 PUSH1 0x1 SWAP2 PUSH2 0x26E DUP10 DUP10 DUP7 PUSH2 0x7DE JUMP JUMPDEST SWAP7 ADD PUSH2 0x2AC JUMP JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH2 0x43E PUSH2 0x902 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xF9 JUMPI PUSH1 0x24 CALLDATALOAD PUSH2 0x4AE PUSH2 0x902 JUMP JUMPDEST PUSH2 0x4B6 PUSH2 0x8AC JUMP JUMPDEST DUP1 SELFBALANCE LT PUSH2 0x53B JUMPI PUSH0 DUP1 DUP1 DUP1 DUP5 DUP7 GAS CALL PUSH2 0x4CD PUSH2 0x86D JUMP JUMPDEST POP ISZERO PUSH2 0x504 JUMPI PUSH1 0x20 PUSH32 0x94B2DE810873337ED265C5F8CF98C9CFFEFA06B8607F9A2F1FBAEBDFBCFBEF1C SWAP2 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1DDA5D1A191C985DCB59985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0xD2DCE6EACCCCD2C6D2CADCE85ACAE8D PUSH1 0x83 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xF9 JUMPI PUSH2 0x58C PUSH2 0x6F2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP2 DUP3 DUP3 SUB PUSH2 0xF9 JUMPI PUSH1 0x20 PUSH32 0xBFED55BDCD242E3DD0F60DDD7D1E87C67F61C34CD9527B3E6455D841B1025362 SWAP2 PUSH2 0x5E3 PUSH1 0x44 CALLDATALOAD DUP1 SWAP6 PUSH2 0x5D5 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x5DD PUSH2 0x8AC JUMP JUMPDEST DUP4 PUSH2 0x928 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 LOG3 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST CALLVALUE PUSH2 0xF9 JUMPI PUSH2 0x608 CALLDATASIZE PUSH2 0x739 JUMP JUMPDEST SWAP3 SWAP1 PUSH2 0x612 PUSH2 0x8AC JUMP JUMPDEST PUSH2 0x61D DUP5 DUP5 EQ PUSH2 0x7A0 JUMP JUMPDEST PUSH0 SWAP4 PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x6D9 JUMPI POP PUSH0 JUMPDEST DUP5 DUP2 LT PUSH2 0x676 JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x8A88AD5EB4D4ACFB8C47FCC9C5B0E66C5162EA704DD1E08CCE235927434E18D2 PUSH1 0x40 CALLER SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 LOG3 PUSH1 0x1 DUP1 SSTORE STOP JUMPDEST DUP1 PUSH2 0x6D3 PUSH2 0x68A PUSH2 0x1C5 PUSH1 0x1 SWAP5 DUP10 DUP10 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x695 DUP4 DUP7 DUP9 PUSH2 0x7DE JUMP JUMPDEST CALLDATALOAD PUSH1 0x40 MLOAD SWAP2 PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP5 ADD MSTORE CALLER PUSH1 0x24 DUP5 ADD MSTORE DUP6 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x64 DUP2 MSTORE PUSH2 0x6CD PUSH1 0x84 DUP3 PUSH2 0x837 JUMP JUMPDEST DUP10 PUSH2 0x96A JUMP JUMPDEST ADD PUSH2 0x62B JUMP JUMPDEST SWAP5 PUSH2 0x6EB PUSH1 0x1 SWAP2 PUSH2 0x26E DUP9 DUP6 DUP8 PUSH2 0x7DE JUMP JUMPDEST SWAP6 ADD PUSH2 0x621 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xF9 JUMPI JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0xF9 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xF9 JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0xF9 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0xF9 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xF9 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0xF9 JUMPI DUP2 PUSH2 0x779 SWAP2 PUSH1 0x4 ADD PUSH2 0x708 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xF9 JUMPI PUSH2 0x79C SWAP2 PUSH1 0x4 ADD PUSH2 0x708 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST ISZERO PUSH2 0x7A7 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0xD8CADCCEE8D05ADAD2E6DAC2E8C6D PUSH1 0x8B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x7EE JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x80F JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xF9 JUMPI SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x859 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x8A7 JUMPI RETURNDATASIZE SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x859 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x89C PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0x837 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SLOAD EQ PUSH2 0x8BD JUMPI PUSH1 0x2 PUSH1 0x1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x915 JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x968 SWAP2 PUSH2 0x963 PUSH1 0x64 DUP4 PUSH2 0x837 JUMP JUMPDEST PUSH2 0x96A JUMP JUMPDEST JUMP JUMPDEST SWAP1 PUSH0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0x3DB JUMPI PUSH0 MLOAD RETURNDATASIZE PUSH2 0x9B9 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0x999 JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x992 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SMOD 0xCA GASPRICE 0xC0 POP 0xEA 0xEA SUB 0xD4 MCOPY LOG0 0xC7 SLT 0xB7 MULMOD 0xB2 0x1F BYTE SWAP8 SGT CHAINID DUP13 0x4E 0x22 0xCB 0xBF PUSH11 0x49A3E7572864736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "476:4062:9:-:0;;;;;;;;;-1:-1:-1;476:4062:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;476:4062:9;;;;;;:::i;:::-;1500:62:0;;:::i;:::-;-1:-1:-1;;;;;476:4062:9;2627:22:0;;2623:91;;476:4062:9;;;-1:-1:-1;;;;;;476:4062:9;;;;;;-1:-1:-1;;;;;476:4062:9;;3052:40:0;;476:4062:9;3052:40:0;476:4062:9;2623:91:0;2672:31;;;476:4062:9;2672:31:0;476:4062:9;;;;;2672:31:0;476:4062:9;;;;;;;-1:-1:-1;;476:4062:9;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;2227:103:4;;;;:::i;:::-;1458:47:9;1466:19;;;1458:47;:::i;:::-;476:4062;1575:13;476:4062;1590:5;;;;;;1673:9;;1664:18;;476:4062;;;1754:5;;;;;;476:4062;;;;;;;;;;;1905:40;476:4062;1924:10;1905:40;;476:4062;1759:1:4;;476:4062:9;1761:3;476:4062;1794:13;;;;;;;;;:::i;:::-;;:::i;:::-;1820:10;;;;;:::i;:::-;476:4062;1794:41;;;;;:::i;:::-;;476:4062;;;;;1739:13;;476:4062;;;-1:-1:-1;;;476:4062:9;;;;;;;;;;;;-1:-1:-1;;;476:4062:9;;;;;;;;;;-1:-1:-1;;;476:4062:9;;;;;;;;;;;;-1:-1:-1;;;476:4062:9;;;;;;;1597:3;1625:10;1616:19;476:4062;1625:10;;;;;;:::i;:::-;476:4062;1616:19;;:::i;:::-;1597:3;476:4062;1575:13;;476:4062;;;;;;;:::i;:::-;1500:62:0;;;;;:::i;:::-;2227:103:4;;:::i;:::-;3281:47:9;3289:19;;;3281:47;:::i;:::-;476:4062;3371:13;476:4062;3386:5;;;;;;-1:-1:-1;476:4062:9;;-1:-1:-1;;;3474:30:9;;3498:4;476:4062;3474:30;;476:4062;-1:-1:-1;;;;;476:4062:9;;;;;;3474:30;476:4062;;3474:30;;;;;;;;476:4062;3474:30;;;3366:76;3522:20;;476:4062;;;3607:5;;;;;;476:4062;;;;;;;;;;;;3704:61;476:4062;3498:4;3704:61;;476:4062;1759:1:4;;476:4062:9;3614:3;3652:13;3667:10;3652:13;;476:4062;3652:13;;;;:::i;:::-;3667:10;;;;;:::i;:::-;476:4062;3667:10;;;:::i;:::-;476:4062;3592:13;;476:4062;;;-1:-1:-1;;;476:4062:9;;;;;;;;3474:30;476:4062;;;;;;;;;;;3474:30;;;;476:4062;3474:30;;476:4062;3474:30;;;;;;476:4062;3474:30;;;:::i;:::-;;;476:4062;;;;;;;3474:30;;;;;;-1:-1:-1;3474:30:9;;;476:4062;;;;;;;;;3393:3;3421:10;3412:19;476:4062;3421:10;;;;;;:::i;3412:19::-;3393:3;476:4062;3371:13;;476:4062;;;;;;-1:-1:-1;;476:4062:9;;;;;;;;-1:-1:-1;;;;;476:4062:9;;;;;;;;;;;;;;-1:-1:-1;;476:4062:9;;;;1500:62:0;;:::i;:::-;476:4062:9;;;-1:-1:-1;;;;;;476:4062:9;;;;-1:-1:-1;;;;;476:4062:9;3052:40:0;476:4062:9;;3052:40:0;476:4062:9;;;;;;;-1:-1:-1;;476:4062:9;;;;;;-1:-1:-1;;;;;476:4062:9;;;;;;;;;;1500:62:0;;:::i;:::-;2227:103:4;;:::i;:::-;3963:21:9;;:31;476:4062;;;4039:26;;;;;;;;;:::i;:::-;;476:4062;;;;4120:24;476:4062;;;;;;4120:24;476:4062;1759:1:4;;476:4062:9;;;;-1:-1:-1;;;476:4062:9;;;;;;;;;;;;-1:-1:-1;;;476:4062:9;;;;;;;;;;-1:-1:-1;;;476:4062:9;;;;;;;;;;;;-1:-1:-1;;;476:4062:9;;;;;;;;;;;;;-1:-1:-1;;476:4062:9;;;;;;:::i;:::-;;;-1:-1:-1;;;;;476:4062:9;;;;;;;;;4380:42;476:4062;4358:6;476:4062;;1500:62:0;;;;:::i;:::-;2227:103:4;;:::i;:::-;4358:6:9;;:::i;:::-;476:4062;;;;;-1:-1:-1;;;;;476:4062:9;;4380:42;476:4062;1759:1:4;;476:4062:9;;;;;;;;:::i;:::-;2227:103:4;;;;:::i;:::-;2535:47:9;2543:19;;;2535:47;:::i;:::-;476:4062;2625:13;476:4062;2640:5;;;;;;2759:13;476:4062;2774:5;;;;;;476:4062;;;;;;;;;1745:53:6;476:4062:9;;;2887:58;476:4062;2823:10;476:4062;;;;;;;2887:58;;476:4062;1759:1:4;;476:4062:9;2781:3;2835:13;1745:53:6;2835:13:9;;476:4062;2835:13;;;;:::i;:::-;2850:10;;;;;:::i;:::-;476:4062;;;;;;;1745:53:6;;;;2823:10:9;1745:53:6;;;476:4062:9;;;;;;;;;;;1745:53:6;476:4062:9;;;1745:53:6;;;;;;;:::i;:::-;;;:::i;:::-;476:4062:9;2759:13;;2647:3;2675:10;2666:19;476:4062;2675:10;;;;;;:::i;2666:19::-;2647:3;476:4062;2625:13;;476:4062;;;;-1:-1:-1;;;;;476:4062:9;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;476:4062:9;;;;;;;-1:-1:-1;;;;;476:4062:9;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;476:4062:9;;;;;;;;;;;;-1:-1:-1;;;476:4062:9;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;476:4062:9;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;476:4062:9;;;;;-1:-1:-1;476:4062:9;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;476:4062:9;;;;;:::i;:::-;;;;-1:-1:-1;476:4062:9;;;;:::o;:::-;;;:::o;2336:287:4:-;1759:1;2468:7;476:4062:9;2468:19:4;1759:1;;;2468:7;1759:1;2336:287::o;1759:1::-;476:4062:9;;-1:-1:-1;;;1759:1:4;;;;;;;;;;;476:4062:9;1759:1:4;476:4062:9;;;1759:1:4;;;;1796:162:0;1710:6;476:4062:9;-1:-1:-1;;;;;476:4062:9;735:10:7;1855:23:0;1851:101;;1796:162::o;1851:101::-;1901:40;;;1710:6;1901:40;735:10:7;1901:40:0;476:4062:9;;1710:6:0;1901:40;1219:160:6;476:4062:9;;-1:-1:-1;;;1328:43:6;;;;-1:-1:-1;;;;;476:4062:9;;;1328:43:6;;;476:4062:9;;;;;;;;;1328:43:6;;;;;;;476:4062:9;1328:43:6;:::i;:::-;;:::i;:::-;1219:160::o;8370:720::-;;-1:-1:-1;8507:421:6;8370:720;8507:421;;;;;;;;;;;;-1:-1:-1;8507:421:6;;8942:15;;-1:-1:-1;;;;;;476:4062:9;;8960:26:6;:31;8942:68;8938:146;;8370:720;:::o;8938:146::-;-1:-1:-1;;;;9033:40:6;;;-1:-1:-1;;;;;476:4062:9;;;;9033:40:6;476:4062:9;;;9033:40:6;8942:68;9009:1;8994:16;;8942:68;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "510400",
								"executionCost": "48453",
								"totalCost": "558853"
							},
							"external": {
								"": "247",
								"bulkTransferERC20(address,address[],uint256[])": "infinite",
								"bulkTransferERC20FromContract(address,address[],uint256[])": "infinite",
								"bulkTransferETH(address[],uint256[])": "infinite",
								"owner()": "2359",
								"renounceOwnership()": "28108",
								"transferOwnership(address)": "28312",
								"withdrawERC20(address,address,uint256)": "infinite",
								"withdrawETH(address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 476,
									"end": 4538,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 944,
									"end": 954,
									"name": "CALLER",
									"source": 9
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1297,
									"end": 1298,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "SLOAD",
									"source": 9
								},
								{
									"begin": 944,
									"end": 954,
									"name": "CALLER",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "OR",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "SSTORE",
									"source": 9
								},
								{
									"begin": 944,
									"end": 954,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "AND",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1297,
									"end": 1298,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "PUSH",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "SSTORE",
									"source": 4
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "RETURN",
									"source": 9
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "1E4FBDF7"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "E0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 1297,
									"end": 1298,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1297,
									"end": 1298,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "PUSH",
									"source": 9,
									"value": "24"
								},
								{
									"begin": 1297,
									"end": 1298,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 476,
									"end": 4538,
									"name": "REVERT",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122007ca3ac050eaea03d45ea0c712b709b21f1a9713468c4e22cbbf6a49a3e7572864736f6c634300081a0033",
									".code": [
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "tag",
											"source": -1,
											"value": "15"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMPDEST",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "14"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "3E46CD53"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44004CC1"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4782F779"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "8DA5CB5B"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "9F62EAFE"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "B874FA6A"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "F2FDE38B"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "38"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2623,
											"end": 2714,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "PUSH",
											"source": 0,
											"value": "1E4FBDF7"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "30"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "46"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "50"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1458,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 1466,
											"end": 1485,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1466,
											"end": 1485,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1466,
											"end": 1485,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1458,
											"end": 1505,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 1458,
											"end": 1505,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1458,
											"end": 1505,
											"name": "tag",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 1458,
											"end": 1505,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1575,
											"end": 1588,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1590,
											"end": 1595,
											"name": "tag",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 1590,
											"end": 1595,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1595,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1595,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1595,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 1590,
											"end": 1595,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 1590,
											"end": 1595,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1673,
											"end": 1682,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 1673,
											"end": 1682,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 1664,
											"end": 1682,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1664,
											"end": 1682,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1754,
											"end": 1759,
											"name": "tag",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 1754,
											"end": 1759,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1754,
											"end": 1759,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 1754,
											"end": 1759,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1754,
											"end": 1759,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 1754,
											"end": 1759,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 1754,
											"end": 1759,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1905,
											"end": 1945,
											"name": "PUSH",
											"source": 9,
											"value": "45D6845DD4F0BDD735A522E3076F82702E80547A0E2B1304A2E483BCA6D9CDC4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1924,
											"end": 1934,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1905,
											"end": 1945,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 1905,
											"end": 1945,
											"name": "LOG2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 1761,
											"end": 1764,
											"name": "tag",
											"source": 9,
											"value": "58"
										},
										{
											"begin": 1761,
											"end": 1764,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 1794,
											"end": 1807,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "tag",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 1794,
											"end": 1807,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "tag",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 1794,
											"end": 1807,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1820,
											"end": 1830,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 1820,
											"end": 1830,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 1820,
											"end": 1830,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1820,
											"end": 1830,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 1820,
											"end": 1830,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 1820,
											"end": 1830,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1820,
											"end": 1830,
											"name": "tag",
											"source": 9,
											"value": "62"
										},
										{
											"begin": 1820,
											"end": 1830,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1835,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1835,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1835,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1835,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 1794,
											"end": 1835,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 1794,
											"end": 1835,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1835,
											"name": "tag",
											"source": 9,
											"value": "63"
										},
										{
											"begin": 1794,
											"end": 1835,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1794,
											"end": 1835,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1739,
											"end": 1752,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 1739,
											"end": 1752,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "F"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "195D1A0B5CD95B990B59985A5B1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "E"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "ECC2D8EACA5ADAD2E6DAC2E8C6D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "93"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 1597,
											"end": 1600,
											"name": "tag",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 1597,
											"end": 1600,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1625,
											"end": 1635,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 1616,
											"end": 1635,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1625,
											"end": 1635,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1625,
											"end": 1635,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 1625,
											"end": 1635,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 1625,
											"end": 1635,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 1625,
											"end": 1635,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 1625,
											"end": 1635,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 1625,
											"end": 1635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1625,
											"end": 1635,
											"name": "tag",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 1625,
											"end": 1635,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1616,
											"end": 1635,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1616,
											"end": 1635,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 1616,
											"end": 1635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 1616,
											"end": 1635,
											"name": "tag",
											"source": 9,
											"value": "66"
										},
										{
											"begin": 1616,
											"end": 1635,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1597,
											"end": 1600,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1575,
											"end": 1588,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "52"
										},
										{
											"begin": 1575,
											"end": 1588,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "28"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "70"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "72"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3281,
											"end": 3328,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 3289,
											"end": 3308,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3308,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3289,
											"end": 3308,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3281,
											"end": 3328,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3281,
											"end": 3328,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3281,
											"end": 3328,
											"name": "tag",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 3281,
											"end": 3328,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3371,
											"end": 3384,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3386,
											"end": 3391,
											"name": "tag",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 3386,
											"end": 3391,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3386,
											"end": 3391,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3386,
											"end": 3391,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3386,
											"end": 3391,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3386,
											"end": 3391,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 3386,
											"end": 3391,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3498,
											"end": 3502,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "STATICCALL",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3366,
											"end": 3442,
											"name": "tag",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3366,
											"end": 3442,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3522,
											"end": 3542,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3522,
											"end": 3542,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3607,
											"end": 3612,
											"name": "tag",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 3607,
											"end": 3612,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3607,
											"end": 3612,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 3607,
											"end": 3612,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3607,
											"end": 3612,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 3607,
											"end": 3612,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 3607,
											"end": 3612,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3765,
											"name": "PUSH",
											"source": 9,
											"value": "8A88AD5EB4D4ACFB8C47FCC9C5B0E66C5162EA704DD1E08CCE235927434E18D2"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3498,
											"end": 3502,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3765,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3704,
											"end": 3765,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 3614,
											"end": 3617,
											"name": "tag",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 3614,
											"end": 3617,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3652,
											"end": 3665,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 3652,
											"end": 3665,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 3652,
											"end": 3665,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3652,
											"end": 3665,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 3652,
											"end": 3665,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 3652,
											"end": 3665,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 3652,
											"end": 3665,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 3652,
											"end": 3665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3652,
											"end": 3665,
											"name": "tag",
											"source": 9,
											"value": "87"
										},
										{
											"begin": 3652,
											"end": 3665,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 3667,
											"end": 3677,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "tag",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 3667,
											"end": 3677,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "tag",
											"source": 9,
											"value": "86"
										},
										{
											"begin": 3667,
											"end": 3677,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3592,
											"end": 3605,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "83"
										},
										{
											"begin": 3592,
											"end": 3605,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "81"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1D"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "696E73756666696369656E742D636F6E74726163742D62616C616E6365000000"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "tag",
											"source": 9,
											"value": "79"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "tag",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3474,
											"end": 3504,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "tag",
											"source": 9,
											"value": "92"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "tag",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "91"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "tag",
											"source": 9,
											"value": "77"
										},
										{
											"begin": 3474,
											"end": 3504,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 3393,
											"end": 3396,
											"name": "tag",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 3393,
											"end": 3396,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3431,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 3412,
											"end": 3431,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 3421,
											"end": 3431,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3431,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 3421,
											"end": 3431,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3431,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3431,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3421,
											"end": 3431,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 3421,
											"end": 3431,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3412,
											"end": 3431,
											"name": "tag",
											"source": 9,
											"value": "95"
										},
										{
											"begin": 3412,
											"end": 3431,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3393,
											"end": 3396,
											"name": "SWAP7",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3371,
											"end": 3384,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "74"
										},
										{
											"begin": 3371,
											"end": 3384,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "26"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "22"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "113"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3963,
											"end": 3984,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 3984,
											"name": "SELFBALANCE",
											"source": 9
										},
										{
											"begin": 3963,
											"end": 3994,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 4039,
											"end": 4065,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "tag",
											"source": 9,
											"value": "116"
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4039,
											"end": 4065,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4120,
											"end": 4144,
											"name": "PUSH",
											"source": 9,
											"value": "94B2DE810873337ED265C5F8CF98C9CFFEFA06B8607F9A2F1FBAEBDFBCFBEF1C"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4120,
											"end": 4144,
											"name": "LOG2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "117"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "F"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1DDA5D1A191C985DCB59985A5B1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "114"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "10"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2DCE6EACCCCD2C6D2CADCE85ACAE8D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "83"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4380,
											"end": 4422,
											"name": "PUSH",
											"source": 9,
											"value": "BFED55BDCD242E3DD0F60DDD7D1E87C67F61C34CD9527B3E6455D841B1025362"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 4358,
											"end": 4364,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1500,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "tag",
											"source": 0,
											"value": "127"
										},
										{
											"begin": 1500,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "128"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4358,
											"end": 4364,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 4358,
											"end": 4364,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 4358,
											"end": 4364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4358,
											"end": 4364,
											"name": "tag",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 4358,
											"end": 4364,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4380,
											"end": 4422,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "18"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 4,
											"value": "132"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2535,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 2543,
											"end": 2562,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2543,
											"end": 2562,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2543,
											"end": 2562,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 2535,
											"end": 2582,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2535,
											"end": 2582,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2535,
											"end": 2582,
											"name": "tag",
											"source": 9,
											"value": "133"
										},
										{
											"begin": 2535,
											"end": 2582,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2625,
											"end": 2638,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2640,
											"end": 2645,
											"name": "tag",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 2640,
											"end": 2645,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2640,
											"end": 2645,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2640,
											"end": 2645,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2640,
											"end": 2645,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2640,
											"end": 2645,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 2640,
											"end": 2645,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2759,
											"end": 2772,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2774,
											"end": 2779,
											"name": "tag",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 2774,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2774,
											"end": 2779,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 2774,
											"end": 2779,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2774,
											"end": 2779,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2774,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 2774,
											"end": 2779,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2887,
											"end": 2945,
											"name": "PUSH",
											"source": 9,
											"value": "8A88AD5EB4D4ACFB8C47FCC9C5B0E66C5162EA704DD1E08CCE235927434E18D2"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2823,
											"end": 2833,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2887,
											"end": 2945,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2887,
											"end": 2945,
											"name": "LOG3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 2781,
											"end": 2784,
											"name": "tag",
											"source": 9,
											"value": "138"
										},
										{
											"begin": 2781,
											"end": 2784,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2835,
											"end": 2848,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 2835,
											"end": 2848,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 2835,
											"end": 2848,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2835,
											"end": 2848,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 2835,
											"end": 2848,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 2835,
											"end": 2848,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 2835,
											"end": 2848,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 2835,
											"end": 2848,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2835,
											"end": 2848,
											"name": "tag",
											"source": 9,
											"value": "141"
										},
										{
											"begin": 2835,
											"end": 2848,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2850,
											"end": 2860,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 2850,
											"end": 2860,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2850,
											"end": 2860,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 2850,
											"end": 2860,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2850,
											"end": 2860,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 2850,
											"end": 2860,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2850,
											"end": 2860,
											"name": "tag",
											"source": 9,
											"value": "143"
										},
										{
											"begin": 2850,
											"end": 2860,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "23B872DD"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2823,
											"end": 2833,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1745,
											"end": 1798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "tag",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 1745,
											"end": 1798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2759,
											"end": 2772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "137"
										},
										{
											"begin": 2759,
											"end": 2772,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2647,
											"end": 2650,
											"name": "tag",
											"source": 9,
											"value": "135"
										},
										{
											"begin": 2647,
											"end": 2650,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2675,
											"end": 2685,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 2666,
											"end": 2685,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 2675,
											"end": 2685,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2675,
											"end": 2685,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 2675,
											"end": 2685,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 2675,
											"end": 2685,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 2675,
											"end": 2685,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 2675,
											"end": 2685,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 2675,
											"end": 2685,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2666,
											"end": 2685,
											"name": "tag",
											"source": 9,
											"value": "145"
										},
										{
											"begin": 2666,
											"end": 2685,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2647,
											"end": 2650,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2625,
											"end": 2638,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "134"
										},
										{
											"begin": 2625,
											"end": 2638,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "161"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "164"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "165"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "F"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8CADCCEE8D05ADAD2E6DAC2E8C6D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "167"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "169"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "36"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "173"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "173"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "173"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "tag",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "tag",
											"source": 4,
											"value": "10"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 4,
											"value": "1"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 4
										},
										{
											"begin": 2336,
											"end": 2623,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "tag",
											"source": 4,
											"value": "181"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "24"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 4,
											"value": "64"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1796,
											"end": 1958,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "tag",
											"source": 0,
											"value": "183"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "118CDAA7"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SHL",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "tag",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 1328,
											"end": 1371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "tag",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 1328,
											"end": 1371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "tag",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1219,
											"end": 1379,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "77"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "RETURNDATASIZE",
											"source": 6
										},
										{
											"begin": 8942,
											"end": 8957,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 8942,
											"end": 8957,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8960,
											"end": 8986,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 8960,
											"end": 8991,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "tag",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 8370,
											"end": 9090,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5274AFE7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 476,
											"end": 4538,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "tag",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 9009,
											"end": 9010,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 8994,
											"end": 9010,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 8994,
											"end": 9010,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"Bulksender.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"bulkTransferERC20(address,address[],uint256[])": "3e46cd53",
							"bulkTransferERC20FromContract(address,address[],uint256[])": "9f62eafe",
							"bulkTransferETH(address[],uint256[])": "b874fa6a",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b",
							"withdrawERC20(address,address,uint256)": "44004cc1",
							"withdrawETH(address,uint256)": "4782f779"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientsCount\",\"type\":\"uint256\"}],\"name\":\"BulkERC20Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientsCount\",\"type\":\"uint256\"}],\"name\":\"BulkETHTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransferERC20FromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"bulkTransferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"ERC20 bulk transfer uses transferFrom, so users must approve this contract first.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"bulkTransferERC20(address,address[],uint256[])\":{\"params\":{\"amounts\":\"Array of amounts corresponding to each recipient (in token units). Requirements: - caller must approve this contract for at least sum(amounts) before calling.\",\"recipients\":\"Array of recipient addresses.\",\"token\":\"ERC20 token contract.\"}},\"bulkTransferETH(address[],uint256[])\":{\"params\":{\"amounts\":\"Array of amounts corresponding to each recipient (in wei). Requirements: - `recipients.length == amounts.length` - sum(amounts) must equal msg.value\",\"recipients\":\"Array of recipient addresses.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"RainDrop\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bulkTransferERC20(address,address[],uint256[])\":{\"notice\":\"Batch-send ERC20 tokens to many recipients using transferFrom.\"},\"bulkTransferERC20FromContract(address,address[],uint256[])\":{\"notice\":\"Owner-only: send ERC20 tokens that are already held by this contract to recipients.\"},\"bulkTransferETH(address[],uint256[])\":{\"notice\":\"Batch-send ETH to many recipients.\"},\"withdrawERC20(address,address,uint256)\":{\"notice\":\"Owner helper: withdraw ERC20 tokens from the contract.\"},\"withdrawETH(address,uint256)\":{\"notice\":\"Owner helper: withdraw ETH accidentally left in the contract.\"}},\"notice\":\"Send ETH or ERC20 tokens to many recipients in one tx.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"Bulksender.sol\":\"RainDrop\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da5e832b40fc5c3145d3781e2e5fa60ac2052c9d08af7e300dc8ab80c4343100\",\"dweb:/ipfs/QmTzf7N5ZUdh5raqtzbM11yexiUoLC9z3Ws632MCuycq1d\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c299900ac4ec268d4570ecef0d697a3013cd11a6eb74e295ee3fbc945056037\",\"dweb:/ipfs/Qmab9owJoxcA7vJT5XNayCMaUR1qxqj1NDzzisduwaJMcZ\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1bb2332a7ee26dd0b0de9b7fe266749f54820c99ab6a3bcb6f7e6b751d47ee2d\",\"dweb:/ipfs/QmcRWpaBeCYkhy68PR3B4AgD7asuQk7PwkWxrvJbZcikLF\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303\",\"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://971f954442df5c2ef5b5ebf1eb245d7105d9fbacc7386ee5c796df1d45b21617\",\"dweb:/ipfs/QmadRjHbkicwqwwh61raUEapaVEtaLMcYbQZWs9gUkgj3u\"]},\"Bulksender.sol\":{\"keccak256\":\"0x52e7eb43fb98fd666c7a688e7833ac78e64da825c9e8bac015aadc521a949687\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d7129b6531d9a0f9719eea82da1a0e7ad0dcac37f13ead642f1a73bf104fc6f0\",\"dweb:/ipfs/QmPGuZyU8zJRQAdGUbeuHDuWMD1ZFnv5atTXyrsUatYrTr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "Bulksender.sol:RainDrop",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 248,
								"contract": "Bulksender.sol:RainDrop",
								"label": "_status",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"bulkTransferERC20(address,address[],uint256[])": {
								"notice": "Batch-send ERC20 tokens to many recipients using transferFrom."
							},
							"bulkTransferERC20FromContract(address,address[],uint256[])": {
								"notice": "Owner-only: send ERC20 tokens that are already held by this contract to recipients."
							},
							"bulkTransferETH(address[],uint256[])": {
								"notice": "Batch-send ETH to many recipients."
							},
							"withdrawERC20(address,address,uint256)": {
								"notice": "Owner helper: withdraw ERC20 tokens from the contract."
							},
							"withdrawETH(address,uint256)": {
								"notice": "Owner helper: withdraw ETH accidentally left in the contract."
							}
						},
						"notice": "Send ETH or ERC20 tokens to many recipients in one tx.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							874
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 875,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 874,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 874,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								874
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 856,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 856,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC1363.sol",
					"exportedSymbols": {
						"IERC1363": [
							229
						],
						"IERC165": [
							886
						],
						"IERC20": [
							380
						]
					},
					"id": 230,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 151,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 230,
							"sourceUnit": 238,
							"src": "133:36:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 150,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 380,
										"src": "141:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 153,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 230,
							"sourceUnit": 234,
							"src": "170:38:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 152,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 886,
										"src": "178:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 155,
										"name": "IERC20",
										"nameLocations": [
											"590:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 380,
										"src": "590:6:1"
									},
									"id": 156,
									"nodeType": "InheritanceSpecifier",
									"src": "590:6:1"
								},
								{
									"baseName": {
										"id": 157,
										"name": "IERC165",
										"nameLocations": [
											"598:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 886,
										"src": "598:7:1"
									},
									"id": 158,
									"nodeType": "InheritanceSpecifier",
									"src": "598:7:1"
								}
							],
							"canonicalName": "IERC1363",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 154,
								"nodeType": "StructuredDocumentation",
								"src": "210:357:1",
								"text": " @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."
							},
							"fullyImplemented": false,
							"id": 229,
							"linearizedBaseContracts": [
								229,
								886,
								380
							],
							"name": "IERC1363",
							"nameLocation": "578:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "1148:370:1",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "1296ee62",
									"id": 168,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "1532:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1556:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1548:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1548:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1568:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1560:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1560:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1547:27:1"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1593:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 165,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1593:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1592:6:1"
									},
									"scope": 229,
									"src": "1523:76:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 169,
										"nodeType": "StructuredDocumentation",
										"src": "1605:453:1",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "4000aea0",
									"id": 180,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "2072:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2096:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2088:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2088:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2108:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2100:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 172,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2100:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2130:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2115:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 174,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2115:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2087:48:1"
									},
									"returnParameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 180,
												"src": "2154:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 177,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2154:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2153:6:1"
									},
									"scope": 229,
									"src": "2063:97:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 181,
										"nodeType": "StructuredDocumentation",
										"src": "2166:453:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "d8fbe994",
									"id": 192,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "2633:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2661:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2653:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2675:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2667:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 184,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2667:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2687:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2679:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2652:41:1"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "2712:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2712:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:6:1"
									},
									"scope": 229,
									"src": "2624:94:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "2724:536:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "c1d34b89",
									"id": 206,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "3274:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3302:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3294:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 194,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3294:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3316:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3308:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3308:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3328:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3320:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3350:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3335:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 200,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3335:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3293:62:1"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "3374:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 203,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3374:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3373:6:1"
									},
									"scope": 229,
									"src": "3265:115:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "3386:390:1",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "3177029f",
									"id": 216,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "3790:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3813:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3805:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3805:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3830:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3822:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3822:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3804:32:1"
									},
									"returnParameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 216,
												"src": "3855:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 213,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3855:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3854:6:1"
									},
									"scope": 229,
									"src": "3781:80:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 217,
										"nodeType": "StructuredDocumentation",
										"src": "3867:478:1",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "cae9ca51",
									"id": 228,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "4359:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4382:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4374:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 218,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4374:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4399:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4391:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4391:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4421:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4406:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 222,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4406:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4373:53:1"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 228,
												"src": "4445:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 225,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4445:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4444:6:1"
									},
									"scope": 229,
									"src": "4350:101:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 230,
							"src": "568:3885:1",
							"usedErrors": [],
							"usedEvents": [
								314,
								323
							]
						}
					],
					"src": "107:4347:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							886
						]
					},
					"id": 234,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 231,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "106:25:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../utils/introspection/IERC165.sol",
							"id": 233,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 234,
							"sourceUnit": 887,
							"src": "133:59:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 232,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 886,
										"src": "141:7:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "106:87:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							380
						]
					},
					"id": 238,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 235,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "105:25:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 237,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 238,
							"sourceUnit": 381,
							"src": "132:49:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 236,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 380,
										"src": "140:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "105:77:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							302
						]
					},
					"id": 303,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 239,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 240,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:4",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 302,
							"linearizedBaseContracts": [
								302
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 243,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 302,
									"src": "1676:41:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 241,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 242,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 246,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:4",
									"nodeType": "VariableDeclaration",
									"scope": 302,
									"src": "1723:37:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 244,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 245,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 248,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:4",
									"nodeType": "VariableDeclaration",
									"scope": 302,
									"src": "1767:23:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 247,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 255,
										"nodeType": "Block",
										"src": "1811:39:4",
										"statements": [
											{
												"expression": {
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 251,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "1821:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 252,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 243,
														"src": "1831:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 254,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:4"
											}
										]
									},
									"id": 256,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:4"
									},
									"returnParameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:4"
									},
									"scope": 302,
									"src": "1797:53:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 266,
										"nodeType": "Block",
										"src": "2251:79:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 259,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 282,
														"src": "2261:19:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 261,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:4"
											},
											{
												"id": 262,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:4"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 263,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 290,
														"src": "2303:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 265,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:4"
											}
										]
									},
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:4",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 267,
									"name": "nonReentrant",
									"nameLocation": "2236:12:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:4"
									},
									"src": "2227:103:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 281,
										"nodeType": "Block",
										"src": "2375:248:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 273,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 271,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 248,
																"src": "2468:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 272,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 246,
																"src": "2479:8:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 274,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 270,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 276,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:4"
											},
											{
												"expression": {
													"id": 279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 277,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "2598:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 278,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "2608:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 280,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:4"
											}
										]
									},
									"id": 282,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:4"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:4"
									},
									"scope": 302,
									"src": "2336:287:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 289,
										"nodeType": "Block",
										"src": "2667:171:4",
										"statements": [
											{
												"expression": {
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 285,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "2809:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 286,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 243,
														"src": "2819:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 288,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:4"
											}
										]
									},
									"id": 290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:4"
									},
									"returnParameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:4"
									},
									"scope": 302,
									"src": "2629:209:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 300,
										"nodeType": "Block",
										"src": "3081:43:4",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 296,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 248,
														"src": "3098:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 297,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 246,
														"src": "3109:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3098:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 295,
												"id": 299,
												"nodeType": "Return",
												"src": "3091:26:4"
											}
										]
									},
									"documentation": {
										"id": 291,
										"nodeType": "StructuredDocumentation",
										"src": "2844:168:4",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 301,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3026:23:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:4"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "3075:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 293,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3075:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:6:4"
									},
									"scope": 302,
									"src": "3017:107:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 303,
							"src": "888:2238:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "112:3015:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							380
						]
					},
					"id": 381,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 304,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "106:25:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 305,
								"nodeType": "StructuredDocumentation",
								"src": "133:71:5",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 380,
							"linearizedBaseContracts": [
								380
							],
							"name": "IERC20",
							"nameLocation": "215:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "228:158:5",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 314,
									"name": "Transfer",
									"nameLocation": "397:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 308,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "422:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "406:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "406:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 310,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "444:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "428:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 309,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "428:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 312,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "456:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "448:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "405:57:5"
									},
									"src": "391:72:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "469:148:5",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 323,
									"name": "Approval",
									"nameLocation": "628:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "653:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "637:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "637:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "676:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "660:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "660:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 321,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "693:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 323,
												"src": "685:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "636:63:5"
									},
									"src": "622:78:5"
								},
								{
									"documentation": {
										"id": 324,
										"nodeType": "StructuredDocumentation",
										"src": "706:65:5",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 329,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "785:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 325,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "796:2:5"
									},
									"returnParameters": {
										"id": 328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 327,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "822:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 326,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "821:9:5"
									},
									"scope": 380,
									"src": "776:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 330,
										"nodeType": "StructuredDocumentation",
										"src": "837:71:5",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 337,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "922:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "940:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "932:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 331,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "932:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "931:17:5"
									},
									"returnParameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "972:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "972:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "971:9:5"
									},
									"scope": 380,
									"src": "913:68:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 338,
										"nodeType": "StructuredDocumentation",
										"src": "987:213:5",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 347,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1214:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1231:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "1223:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 339,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1243:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "1235:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 341,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1235:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:27:5"
									},
									"returnParameters": {
										"id": 346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "1268:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 344,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:6:5"
									},
									"scope": 380,
									"src": "1205:69:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 348,
										"nodeType": "StructuredDocumentation",
										"src": "1280:264:5",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 357,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1558:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 350,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1576:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "1568:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 349,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1568:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1591:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "1583:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1583:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1567:32:5"
									},
									"returnParameters": {
										"id": 356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 355,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "1623:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 354,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1623:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1622:9:5"
									},
									"scope": 380,
									"src": "1549:83:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 358,
										"nodeType": "StructuredDocumentation",
										"src": "1638:667:5",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 367,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2319:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 360,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2335:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "2327:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 359,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2327:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2352:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "2344:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2344:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2326:32:5"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "2377:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 364,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2377:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2376:6:5"
									},
									"scope": 380,
									"src": "2310:73:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "2389:297:5",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 379,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2700:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 370,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2721:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2713:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2713:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2735:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2727:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2747:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2739:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2739:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2712:41:5"
									},
									"returnParameters": {
										"id": 378,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2772:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 376,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2772:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2771:6:5"
									},
									"scope": 380,
									"src": "2691:87:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 381,
							"src": "205:2575:5",
							"usedErrors": [],
							"usedEvents": [
								314,
								323
							]
						}
					],
					"src": "106:2675:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"IERC1363": [
							229
						],
						"IERC20": [
							380
						],
						"SafeERC20": [
							844
						]
					},
					"id": 845,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 382,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 384,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 845,
							"sourceUnit": 381,
							"src": "141:37:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 383,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 380,
										"src": "149:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC1363.sol",
							"file": "../../../interfaces/IERC1363.sol",
							"id": 386,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 845,
							"sourceUnit": 230,
							"src": "179:58:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 385,
										"name": "IERC1363",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 229,
										"src": "187:8:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 387,
								"nodeType": "StructuredDocumentation",
								"src": "239:458:6",
								"text": " @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 844,
							"linearizedBaseContracts": [
								844
							],
							"name": "SafeERC20",
							"nameLocation": "706:9:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 388,
										"nodeType": "StructuredDocumentation",
										"src": "722:65:6",
										"text": " @dev An operation with an ERC-20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 392,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "798:24:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "831:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 392,
												"src": "823:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "823:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "822:15:6"
									},
									"src": "792:46:6"
								},
								{
									"documentation": {
										"id": 393,
										"nodeType": "StructuredDocumentation",
										"src": "844:71:6",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 401,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "926:32:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "967:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "959:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 394,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "984:16:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "976:24:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 396,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "976:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 399,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1010:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "1002:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "958:70:6"
									},
									"src": "920:109:6"
								},
								{
									"body": {
										"id": 424,
										"nodeType": "Block",
										"src": "1291:88:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 413,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "1321:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 416,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 405,
																		"src": "1343:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1349:8:6",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 347,
																	"src": "1343:14:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 418,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 407,
																			"src": "1360:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 419,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 409,
																			"src": "1364:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 420,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1359:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 414,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1328:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 415,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1332:10:6",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1328:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1328:43:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 412,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 802,
														"src": "1301:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1301:71:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 423,
												"nodeType": "ExpressionStatement",
												"src": "1301:71:6"
											}
										]
									},
									"documentation": {
										"id": 402,
										"nodeType": "StructuredDocumentation",
										"src": "1035:179:6",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1228:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 410,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1248:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "1241:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 404,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 403,
														"name": "IERC20",
														"nameLocations": [
															"1241:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "1241:6:6"
													},
													"referencedDeclaration": 380,
													"src": "1241:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1263:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "1255:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 406,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1255:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1275:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "1267:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1240:41:6"
									},
									"returnParameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1291:0:6"
									},
									"scope": 844,
									"src": "1219:160:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 451,
										"nodeType": "Block",
										"src": "1708:98:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 439,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "1738:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 442,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 429,
																		"src": "1760:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 443,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1766:12:6",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 379,
																	"src": "1760:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 444,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 431,
																			"src": "1781:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 445,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 433,
																			"src": "1787:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 446,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 435,
																			"src": "1791:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 447,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1780:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 440,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1745:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 441,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1749:10:6",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1745:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1745:53:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 438,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 802,
														"src": "1718:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1718:81:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 450,
												"nodeType": "ExpressionStatement",
												"src": "1718:81:6"
											}
										]
									},
									"documentation": {
										"id": 426,
										"nodeType": "StructuredDocumentation",
										"src": "1385:228:6",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 452,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1627:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1651:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "1644:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 428,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 427,
														"name": "IERC20",
														"nameLocations": [
															"1644:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "1644:6:6"
													},
													"referencedDeclaration": 380,
													"src": "1644:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1666:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "1658:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 430,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1658:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 433,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1680:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "1672:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 432,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1672:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1692:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 452,
												"src": "1684:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 434,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1643:55:6"
									},
									"returnParameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1708:0:6"
									},
									"scope": 844,
									"src": "1618:188:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 477,
										"nodeType": "Block",
										"src": "2033:99:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 466,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 456,
															"src": "2074:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 469,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 456,
																		"src": "2096:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2102:8:6",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 347,
																	"src": "2096:14:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 471,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 458,
																			"src": "2113:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 472,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 460,
																			"src": "2117:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 473,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2112:11:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 467,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2081:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 468,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2085:10:6",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "2081:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2081:43:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 465,
														"name": "_callOptionalReturnBool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 843,
														"src": "2050:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC20,bytes memory) returns (bool)"
														}
													},
													"id": 475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2050:75:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 464,
												"id": 476,
												"nodeType": "Return",
												"src": "2043:82:6"
											}
										]
									},
									"documentation": {
										"id": 453,
										"nodeType": "StructuredDocumentation",
										"src": "1812:126:6",
										"text": " @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful."
									},
									"id": 478,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransfer",
									"nameLocation": "1952:15:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1975:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "1968:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 455,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 454,
														"name": "IERC20",
														"nameLocations": [
															"1968:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "1968:6:6"
													},
													"referencedDeclaration": 380,
													"src": "1968:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 458,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1990:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "1982:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 457,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1982:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 460,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2002:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "1994:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 459,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1967:41:6"
									},
									"returnParameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 478,
												"src": "2027:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 462,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2027:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2026:6:6"
									},
									"scope": 844,
									"src": "1943:189:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "2381:109:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 494,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "2422:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 497,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 482,
																		"src": "2444:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 498,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2450:12:6",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 379,
																	"src": "2444:18:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 499,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 484,
																			"src": "2465:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 500,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 486,
																			"src": "2471:2:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 501,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 488,
																			"src": "2475:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 502,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2464:17:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 495,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2429:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 496,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2433:10:6",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "2429:14:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 503,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2429:53:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 493,
														"name": "_callOptionalReturnBool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 843,
														"src": "2398:23:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC20,bytes memory) returns (bool)"
														}
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2398:85:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 492,
												"id": 505,
												"nodeType": "Return",
												"src": "2391:92:6"
											}
										]
									},
									"documentation": {
										"id": 479,
										"nodeType": "StructuredDocumentation",
										"src": "2138:130:6",
										"text": " @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful."
									},
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransferFrom",
									"nameLocation": "2282:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2309:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "2302:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 481,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 480,
														"name": "IERC20",
														"nameLocations": [
															"2302:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "2302:6:6"
													},
													"referencedDeclaration": 380,
													"src": "2302:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2324:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "2316:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 483,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2316:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2338:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "2330:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 485,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "2342:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 487,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:55:6"
									},
									"returnParameters": {
										"id": 492,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "2375:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 490,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:6"
									},
									"scope": 844,
									"src": "2273:217:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 537,
										"nodeType": "Block",
										"src": "3232:139:6",
										"statements": [
											{
												"assignments": [
													519
												],
												"declarations": [
													{
														"constant": false,
														"id": 519,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "3250:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 537,
														"src": "3242:20:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 518,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3242:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 528,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 524,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3289:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$844",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$844",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 523,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3281:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 522,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3281:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3281:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 526,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "3296:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 520,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "3265:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														"id": 521,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3271:9:6",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 357,
														"src": "3265:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3265:39:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3242:62:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 530,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 511,
															"src": "3327:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 531,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "3334:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 534,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 532,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 519,
																"src": "3343:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 533,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 515,
																"src": "3358:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3343:20:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 529,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 628,
														"src": "3314:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3314:50:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 536,
												"nodeType": "ExpressionStatement",
												"src": "3314:50:6"
											}
										]
									},
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "2496:645:6",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 538,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "3155:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 511,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3184:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 538,
												"src": "3177:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 510,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 509,
														"name": "IERC20",
														"nameLocations": [
															"3177:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "3177:6:6"
													},
													"referencedDeclaration": 380,
													"src": "3177:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3199:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 538,
												"src": "3191:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 512,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3191:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3216:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 538,
												"src": "3208:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 514,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3208:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3176:46:6"
									},
									"returnParameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3232:0:6"
									},
									"scope": 844,
									"src": "3146:225:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 580,
										"nodeType": "Block",
										"src": "4137:370:6",
										"statements": [
											{
												"id": 579,
												"nodeType": "UncheckedBlock",
												"src": "4147:354:6",
												"statements": [
													{
														"assignments": [
															550
														],
														"declarations": [
															{
																"constant": false,
																"id": 550,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "4179:16:6",
																"nodeType": "VariableDeclaration",
																"scope": 579,
																"src": "4171:24:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 549,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4171:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 559,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 555,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4222:4:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$844",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$844",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 554,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4214:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 553,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4214:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 556,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4214:13:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 557,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 544,
																	"src": "4229:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 551,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 542,
																	"src": "4198:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 552,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4204:9:6",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 357,
																"src": "4198:15:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 558,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4198:39:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4171:66:6"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 560,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 550,
																"src": "4255:16:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 561,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 546,
																"src": "4274:17:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4255:36:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 570,
														"nodeType": "IfStatement",
														"src": "4251:160:6",
														"trueBody": {
															"id": 569,
															"nodeType": "Block",
															"src": "4293:118:6",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 564,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 544,
																				"src": "4351:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 565,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 550,
																				"src": "4360:16:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 566,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 546,
																				"src": "4378:17:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 563,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 401,
																			"src": "4318:32:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (address,uint256,uint256) pure returns (error)"
																			}
																		},
																		"id": 567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4318:78:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 568,
																	"nodeType": "RevertStatement",
																	"src": "4311:85:6"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 572,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 542,
																	"src": "4437:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 573,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 544,
																	"src": "4444:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 574,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 550,
																		"src": "4453:16:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 575,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 546,
																		"src": "4472:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4453:36:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 571,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 628,
																"src": "4424:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 577,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4424:66:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 578,
														"nodeType": "ExpressionStatement",
														"src": "4424:66:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 539,
										"nodeType": "StructuredDocumentation",
										"src": "3377:657:6",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 581,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "4048:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4077:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "4070:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 541,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 540,
														"name": "IERC20",
														"nameLocations": [
															"4070:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "4070:6:6"
													},
													"referencedDeclaration": 380,
													"src": "4070:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4092:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "4084:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 543,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4084:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "4109:17:6",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "4101:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4101:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4069:58:6"
									},
									"returnParameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4137:0:6"
									},
									"scope": 844,
									"src": "4039:468:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 627,
										"nodeType": "Block",
										"src": "5161:303:6",
										"statements": [
											{
												"assignments": [
													593
												],
												"declarations": [
													{
														"constant": false,
														"id": 593,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "5184:12:6",
														"nodeType": "VariableDeclaration",
														"scope": 627,
														"src": "5171:25:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 592,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5171:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 602,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 596,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 585,
																"src": "5214:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$380",
																	"typeString": "contract IERC20"
																}
															},
															"id": 597,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5220:7:6",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 367,
															"src": "5214:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 598,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 587,
																	"src": "5230:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 599,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 589,
																	"src": "5239:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 600,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5229:16:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 594,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5199:3:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 595,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5203:10:6",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "5199:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5199:47:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5171:75:6"
											},
											{
												"condition": {
													"id": 607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5261:45:6",
													"subExpression": {
														"arguments": [
															{
																"id": 604,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 585,
																"src": "5286:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$380",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 605,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 593,
																"src": "5293:12:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$380",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 603,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 843,
															"src": "5262:23:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 606,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5262:44:6",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 626,
												"nodeType": "IfStatement",
												"src": "5257:201:6",
												"trueBody": {
													"id": 625,
													"nodeType": "Block",
													"src": "5308:150:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 609,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 585,
																		"src": "5342:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 612,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 585,
																					"src": "5364:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$380",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 613,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5370:7:6",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 367,
																				"src": "5364:13:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 614,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 587,
																						"src": "5380:7:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 615,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5389:1:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 616,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5379:12:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 610,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5349:3:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 611,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5353:10:6",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "5349:14:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5349:43:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 608,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 802,
																	"src": "5322:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 618,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5322:71:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 619,
															"nodeType": "ExpressionStatement",
															"src": "5322:71:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 621,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 585,
																		"src": "5427:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 622,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 593,
																		"src": "5434:12:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 620,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 802,
																	"src": "5407:19:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 623,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5407:40:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 624,
															"nodeType": "ExpressionStatement",
															"src": "5407:40:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 582,
										"nodeType": "StructuredDocumentation",
										"src": "4513:566:6",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."
									},
									"id": 628,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "5093:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5113:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "5106:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 584,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 583,
														"name": "IERC20",
														"nameLocations": [
															"5106:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "5106:6:6"
													},
													"referencedDeclaration": 380,
													"src": "5106:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5128:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "5120:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 586,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5120:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5145:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "5137:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5137:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5105:46:6"
									},
									"returnParameters": {
										"id": 591,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5161:0:6"
									},
									"scope": 844,
									"src": "5084:380:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 670,
										"nodeType": "Block",
										"src": "5911:219:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 645,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 641,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 634,
																"src": "5925:2:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 642,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5928:4:6",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "5925:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 643,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5933:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5925:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 644,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5943:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5925:19:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 659,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6011:39:6",
														"subExpression": {
															"arguments": [
																{
																	"id": 655,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 634,
																	"src": "6034:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 656,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 636,
																	"src": "6038:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 657,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 638,
																	"src": "6045:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 653,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 632,
																	"src": "6012:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$229",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 654,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6018:15:6",
																"memberName": "transferAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 180,
																"src": "6012:21:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6012:38:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 668,
													"nodeType": "IfStatement",
													"src": "6007:117:6",
													"trueBody": {
														"id": 667,
														"nodeType": "Block",
														"src": "6052:72:6",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 663,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 632,
																					"src": "6106:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 662,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6098:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 661,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6098:7:6",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 664,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6098:14:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 660,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "6073:24:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 665,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6073:40:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 666,
																"nodeType": "RevertStatement",
																"src": "6066:47:6"
															}
														]
													}
												},
												"id": 669,
												"nodeType": "IfStatement",
												"src": "5921:203:6",
												"trueBody": {
													"id": 652,
													"nodeType": "Block",
													"src": "5946:55:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 647,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 632,
																		"src": "5973:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 648,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 634,
																		"src": "5980:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 649,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 636,
																		"src": "5984:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 646,
																	"name": "safeTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 425,
																	"src": "5960:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 650,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5960:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 651,
															"nodeType": "ExpressionStatement",
															"src": "5960:30:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 629,
										"nodeType": "StructuredDocumentation",
										"src": "5470:333:6",
										"text": " @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 671,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCallRelaxed",
									"nameLocation": "5817:22:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 632,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5849:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "5840:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$229",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 631,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 630,
														"name": "IERC1363",
														"nameLocations": [
															"5840:8:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 229,
														"src": "5840:8:6"
													},
													"referencedDeclaration": 229,
													"src": "5840:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$229",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5864:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "5856:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5856:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5876:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "5868:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5868:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5896:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 671,
												"src": "5883:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 637,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5883:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5839:62:6"
									},
									"returnParameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5911:0:6"
									},
									"scope": 844,
									"src": "5808:322:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 717,
										"nodeType": "Block",
										"src": "6649:239:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 690,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 686,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 679,
																"src": "6663:2:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6666:4:6",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "6663:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 688,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6671:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6663:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 689,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6681:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6663:19:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 706,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6759:49:6",
														"subExpression": {
															"arguments": [
																{
																	"id": 701,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 677,
																	"src": "6786:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 702,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 679,
																	"src": "6792:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 703,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 681,
																	"src": "6796:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 704,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 683,
																	"src": "6803:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 699,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 675,
																	"src": "6760:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$229",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 700,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6766:19:6",
																"memberName": "transferFromAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 206,
																"src": "6760:25:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 705,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6760:48:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 715,
													"nodeType": "IfStatement",
													"src": "6755:127:6",
													"trueBody": {
														"id": 714,
														"nodeType": "Block",
														"src": "6810:72:6",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 710,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 675,
																					"src": "6864:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 709,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6856:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 708,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6856:7:6",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 711,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6856:14:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 707,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "6831:24:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 712,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6831:40:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 713,
																"nodeType": "RevertStatement",
																"src": "6824:47:6"
															}
														]
													}
												},
												"id": 716,
												"nodeType": "IfStatement",
												"src": "6659:223:6",
												"trueBody": {
													"id": 698,
													"nodeType": "Block",
													"src": "6684:65:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 692,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 675,
																		"src": "6715:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 693,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 677,
																		"src": "6722:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 694,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 679,
																		"src": "6728:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 695,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 681,
																		"src": "6732:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 691,
																	"name": "safeTransferFrom",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 452,
																	"src": "6698:16:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 696,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6698:40:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 697,
															"nodeType": "ExpressionStatement",
															"src": "6698:40:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 672,
										"nodeType": "StructuredDocumentation",
										"src": "6136:341:6",
										"text": " @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 718,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCallRelaxed",
									"nameLocation": "6491:26:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 675,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6536:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "6527:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$229",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 674,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 673,
														"name": "IERC1363",
														"nameLocations": [
															"6527:8:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 229,
														"src": "6527:8:6"
													},
													"referencedDeclaration": 229,
													"src": "6527:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$229",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6559:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "6551:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6551:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6581:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "6573:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6573:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6601:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "6593:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 680,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6593:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 718,
												"src": "6616:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 682,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6517:122:6"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6649:0:6"
									},
									"scope": 844,
									"src": "6482:406:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 760,
										"nodeType": "Block",
										"src": "7655:218:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 731,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 724,
																"src": "7669:2:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 732,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7672:4:6",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "7669:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 733,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7677:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7669:14:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 734,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7687:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7669:19:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 749,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "7755:38:6",
														"subExpression": {
															"arguments": [
																{
																	"id": 745,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 724,
																	"src": "7777:2:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 746,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 726,
																	"src": "7781:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 747,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 728,
																	"src": "7788:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 743,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 722,
																	"src": "7756:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$229",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 744,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7762:14:6",
																"memberName": "approveAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 228,
																"src": "7756:20:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 748,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7756:37:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 758,
													"nodeType": "IfStatement",
													"src": "7751:116:6",
													"trueBody": {
														"id": 757,
														"nodeType": "Block",
														"src": "7795:72:6",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 753,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 722,
																					"src": "7849:5:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$229",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 752,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7841:7:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 751,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "7841:7:6",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 754,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7841:14:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 750,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "7816:24:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 755,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7816:40:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 756,
																"nodeType": "RevertStatement",
																"src": "7809:47:6"
															}
														]
													}
												},
												"id": 759,
												"nodeType": "IfStatement",
												"src": "7665:202:6",
												"trueBody": {
													"id": 742,
													"nodeType": "Block",
													"src": "7690:55:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 737,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "7717:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 738,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 724,
																		"src": "7724:2:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 739,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 726,
																		"src": "7728:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$229",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 736,
																	"name": "forceApprove",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 628,
																	"src": "7704:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 740,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7704:30:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 741,
															"nodeType": "ExpressionStatement",
															"src": "7704:30:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 719,
										"nodeType": "StructuredDocumentation",
										"src": "6894:654:6",
										"text": " @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."
									},
									"id": 761,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCallRelaxed",
									"nameLocation": "7562:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 729,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7593:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "7584:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$229",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 721,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 720,
														"name": "IERC1363",
														"nameLocations": [
															"7584:8:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 229,
														"src": "7584:8:6"
													},
													"referencedDeclaration": 229,
													"src": "7584:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$229",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7608:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "7600:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 723,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7600:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7620:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "7612:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 725,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7612:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 728,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7640:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "7627:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 727,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7627:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7583:62:6"
									},
									"returnParameters": {
										"id": 730,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7655:0:6"
									},
									"scope": 844,
									"src": "7553:320:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 801,
										"nodeType": "Block",
										"src": "8440:650:6",
										"statements": [
											{
												"assignments": [
													771
												],
												"declarations": [
													{
														"constant": false,
														"id": 771,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "8458:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 801,
														"src": "8450:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 770,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8450:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 772,
												"nodeType": "VariableDeclarationStatement",
												"src": "8450:18:6"
											},
											{
												"assignments": [
													774
												],
												"declarations": [
													{
														"constant": false,
														"id": 774,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "8486:11:6",
														"nodeType": "VariableDeclaration",
														"scope": 801,
														"src": "8478:19:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 773,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8478:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 775,
												"nodeType": "VariableDeclarationStatement",
												"src": "8478:19:6"
											},
											{
												"AST": {
													"nativeSrc": "8532:396:6",
													"nodeType": "YulBlock",
													"src": "8532:396:6",
													"statements": [
														{
															"nativeSrc": "8546:75:6",
															"nodeType": "YulVariableDeclaration",
															"src": "8546:75:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "8566:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "8566:3:6"
																		},
																		"nativeSrc": "8566:5:6",
																		"nodeType": "YulFunctionCall",
																		"src": "8566:5:6"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "8573:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "8573:5:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8580:1:6",
																		"nodeType": "YulLiteral",
																		"src": "8580:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "8587:4:6",
																				"nodeType": "YulIdentifier",
																				"src": "8587:4:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8593:4:6",
																				"nodeType": "YulLiteral",
																				"src": "8593:4:6",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8583:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "8583:3:6"
																		},
																		"nativeSrc": "8583:15:6",
																		"nodeType": "YulFunctionCall",
																		"src": "8583:15:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "8606:4:6",
																				"nodeType": "YulIdentifier",
																				"src": "8606:4:6"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "8600:5:6",
																			"nodeType": "YulIdentifier",
																			"src": "8600:5:6"
																		},
																		"nativeSrc": "8600:11:6",
																		"nodeType": "YulFunctionCall",
																		"src": "8600:11:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8613:1:6",
																		"nodeType": "YulLiteral",
																		"src": "8613:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8616:4:6",
																		"nodeType": "YulLiteral",
																		"src": "8616:4:6",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "8561:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "8561:4:6"
																},
																"nativeSrc": "8561:60:6",
																"nodeType": "YulFunctionCall",
																"src": "8561:60:6"
															},
															"variables": [
																{
																	"name": "success",
																	"nativeSrc": "8550:7:6",
																	"nodeType": "YulTypedName",
																	"src": "8550:7:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8682:157:6",
																"nodeType": "YulBlock",
																"src": "8682:157:6",
																"statements": [
																	{
																		"nativeSrc": "8700:22:6",
																		"nodeType": "YulVariableDeclaration",
																		"src": "8700:22:6",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "8717:4:6",
																					"nodeType": "YulLiteral",
																					"src": "8717:4:6",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "8711:5:6",
																				"nodeType": "YulIdentifier",
																				"src": "8711:5:6"
																			},
																			"nativeSrc": "8711:11:6",
																			"nodeType": "YulFunctionCall",
																			"src": "8711:11:6"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nativeSrc": "8704:3:6",
																				"nodeType": "YulTypedName",
																				"src": "8704:3:6",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8754:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "8754:3:6"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8759:1:6",
																					"nodeType": "YulLiteral",
																					"src": "8759:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8762:14:6",
																						"nodeType": "YulIdentifier",
																						"src": "8762:14:6"
																					},
																					"nativeSrc": "8762:16:6",
																					"nodeType": "YulFunctionCall",
																					"src": "8762:16:6"
																				}
																			],
																			"functionName": {
																				"name": "returndatacopy",
																				"nativeSrc": "8739:14:6",
																				"nodeType": "YulIdentifier",
																				"src": "8739:14:6"
																			},
																			"nativeSrc": "8739:40:6",
																			"nodeType": "YulFunctionCall",
																			"src": "8739:40:6"
																		},
																		"nativeSrc": "8739:40:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "8739:40:6"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8803:3:6",
																					"nodeType": "YulIdentifier",
																					"src": "8803:3:6"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8808:14:6",
																						"nodeType": "YulIdentifier",
																						"src": "8808:14:6"
																					},
																					"nativeSrc": "8808:16:6",
																					"nodeType": "YulFunctionCall",
																					"src": "8808:16:6"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "8796:6:6",
																				"nodeType": "YulIdentifier",
																				"src": "8796:6:6"
																			},
																			"nativeSrc": "8796:29:6",
																			"nodeType": "YulFunctionCall",
																			"src": "8796:29:6"
																		},
																		"nativeSrc": "8796:29:6",
																		"nodeType": "YulExpressionStatement",
																		"src": "8796:29:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "success",
																		"nativeSrc": "8673:7:6",
																		"nodeType": "YulIdentifier",
																		"src": "8673:7:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8666:6:6",
																	"nodeType": "YulIdentifier",
																	"src": "8666:6:6"
																},
																"nativeSrc": "8666:15:6",
																"nodeType": "YulFunctionCall",
																"src": "8666:15:6"
															},
															"nativeSrc": "8663:176:6",
															"nodeType": "YulIf",
															"src": "8663:176:6"
														},
														{
															"nativeSrc": "8852:30:6",
															"nodeType": "YulAssignment",
															"src": "8852:30:6",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "8866:14:6",
																	"nodeType": "YulIdentifier",
																	"src": "8866:14:6"
																},
																"nativeSrc": "8866:16:6",
																"nodeType": "YulFunctionCall",
																"src": "8866:16:6"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "8852:10:6",
																	"nodeType": "YulIdentifier",
																	"src": "8852:10:6"
																}
															]
														},
														{
															"nativeSrc": "8895:23:6",
															"nodeType": "YulAssignment",
															"src": "8895:23:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8916:1:6",
																		"nodeType": "YulLiteral",
																		"src": "8916:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8910:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "8910:5:6"
																},
																"nativeSrc": "8910:8:6",
																"nodeType": "YulFunctionCall",
																"src": "8910:8:6"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "8895:11:6",
																	"nodeType": "YulIdentifier",
																	"src": "8895:11:6"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 767,
														"isOffset": false,
														"isSlot": false,
														"src": "8587:4:6",
														"valueSize": 1
													},
													{
														"declaration": 767,
														"isOffset": false,
														"isSlot": false,
														"src": "8606:4:6",
														"valueSize": 1
													},
													{
														"declaration": 771,
														"isOffset": false,
														"isSlot": false,
														"src": "8852:10:6",
														"valueSize": 1
													},
													{
														"declaration": 774,
														"isOffset": false,
														"isSlot": false,
														"src": "8895:11:6",
														"valueSize": 1
													},
													{
														"declaration": 765,
														"isOffset": false,
														"isSlot": false,
														"src": "8573:5:6",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 776,
												"nodeType": "InlineAssembly",
												"src": "8507:421:6"
											},
											{
												"condition": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 779,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 777,
															"name": "returnSize",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 771,
															"src": "8942:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 778,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8956:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8942:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 790,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 788,
															"name": "returnValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 774,
															"src": "8994:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "31",
															"id": 789,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9009:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "8994:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 791,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8942:68:6",
													"trueExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 787,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 782,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 765,
																			"src": "8968:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$380",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$380",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 781,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8960:7:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 780,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "8960:7:6",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 783,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8960:14:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 784,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8975:4:6",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "8960:19:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 785,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8980:6:6",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8960:26:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 786,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8990:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8960:31:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 800,
												"nodeType": "IfStatement",
												"src": "8938:146:6",
												"trueBody": {
													"id": 799,
													"nodeType": "Block",
													"src": "9012:72:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 795,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 765,
																				"src": "9066:5:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$380",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$380",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 794,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9058:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 793,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9058:7:6",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 796,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9058:14:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 792,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 392,
																	"src": "9033:24:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 797,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9033:40:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 798,
															"nodeType": "RevertStatement",
															"src": "9026:47:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 762,
										"nodeType": "StructuredDocumentation",
										"src": "7879:486:6",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."
									},
									"id": 802,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "8379:19:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 765,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8406:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "8399:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 764,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 763,
														"name": "IERC20",
														"nameLocations": [
															"8399:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "8399:6:6"
													},
													"referencedDeclaration": 380,
													"src": "8399:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8426:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 802,
												"src": "8413:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 766,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8413:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8398:33:6"
									},
									"returnParameters": {
										"id": 769,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8440:0:6"
									},
									"scope": 844,
									"src": "8370:720:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 842,
										"nodeType": "Block",
										"src": "9681:391:6",
										"statements": [
											{
												"assignments": [
													814
												],
												"declarations": [
													{
														"constant": false,
														"id": 814,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "9696:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 842,
														"src": "9691:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 813,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9691:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 815,
												"nodeType": "VariableDeclarationStatement",
												"src": "9691:12:6"
											},
											{
												"assignments": [
													817
												],
												"declarations": [
													{
														"constant": false,
														"id": 817,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "9721:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 842,
														"src": "9713:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 816,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9713:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 818,
												"nodeType": "VariableDeclarationStatement",
												"src": "9713:18:6"
											},
											{
												"assignments": [
													820
												],
												"declarations": [
													{
														"constant": false,
														"id": 820,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "9749:11:6",
														"nodeType": "VariableDeclaration",
														"scope": 842,
														"src": "9741:19:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 819,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9741:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 821,
												"nodeType": "VariableDeclarationStatement",
												"src": "9741:19:6"
											},
											{
												"AST": {
													"nativeSrc": "9795:174:6",
													"nodeType": "YulBlock",
													"src": "9795:174:6",
													"statements": [
														{
															"nativeSrc": "9809:71:6",
															"nodeType": "YulAssignment",
															"src": "9809:71:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "9825:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "9825:3:6"
																		},
																		"nativeSrc": "9825:5:6",
																		"nodeType": "YulFunctionCall",
																		"src": "9825:5:6"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "9832:5:6",
																		"nodeType": "YulIdentifier",
																		"src": "9832:5:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9839:1:6",
																		"nodeType": "YulLiteral",
																		"src": "9839:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9846:4:6",
																				"nodeType": "YulIdentifier",
																				"src": "9846:4:6"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9852:4:6",
																				"nodeType": "YulLiteral",
																				"src": "9852:4:6",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9842:3:6",
																			"nodeType": "YulIdentifier",
																			"src": "9842:3:6"
																		},
																		"nativeSrc": "9842:15:6",
																		"nodeType": "YulFunctionCall",
																		"src": "9842:15:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9865:4:6",
																				"nodeType": "YulIdentifier",
																				"src": "9865:4:6"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "9859:5:6",
																			"nodeType": "YulIdentifier",
																			"src": "9859:5:6"
																		},
																		"nativeSrc": "9859:11:6",
																		"nodeType": "YulFunctionCall",
																		"src": "9859:11:6"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9872:1:6",
																		"nodeType": "YulLiteral",
																		"src": "9872:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9875:4:6",
																		"nodeType": "YulLiteral",
																		"src": "9875:4:6",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "9820:4:6",
																	"nodeType": "YulIdentifier",
																	"src": "9820:4:6"
																},
																"nativeSrc": "9820:60:6",
																"nodeType": "YulFunctionCall",
																"src": "9820:60:6"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nativeSrc": "9809:7:6",
																	"nodeType": "YulIdentifier",
																	"src": "9809:7:6"
																}
															]
														},
														{
															"nativeSrc": "9893:30:6",
															"nodeType": "YulAssignment",
															"src": "9893:30:6",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "9907:14:6",
																	"nodeType": "YulIdentifier",
																	"src": "9907:14:6"
																},
																"nativeSrc": "9907:16:6",
																"nodeType": "YulFunctionCall",
																"src": "9907:16:6"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "9893:10:6",
																	"nodeType": "YulIdentifier",
																	"src": "9893:10:6"
																}
															]
														},
														{
															"nativeSrc": "9936:23:6",
															"nodeType": "YulAssignment",
															"src": "9936:23:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9957:1:6",
																		"nodeType": "YulLiteral",
																		"src": "9957:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "9951:5:6",
																	"nodeType": "YulIdentifier",
																	"src": "9951:5:6"
																},
																"nativeSrc": "9951:8:6",
																"nodeType": "YulFunctionCall",
																"src": "9951:8:6"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "9936:11:6",
																	"nodeType": "YulIdentifier",
																	"src": "9936:11:6"
																}
															]
														}
													]
												},
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 808,
														"isOffset": false,
														"isSlot": false,
														"src": "9846:4:6",
														"valueSize": 1
													},
													{
														"declaration": 808,
														"isOffset": false,
														"isSlot": false,
														"src": "9865:4:6",
														"valueSize": 1
													},
													{
														"declaration": 817,
														"isOffset": false,
														"isSlot": false,
														"src": "9893:10:6",
														"valueSize": 1
													},
													{
														"declaration": 820,
														"isOffset": false,
														"isSlot": false,
														"src": "9936:11:6",
														"valueSize": 1
													},
													{
														"declaration": 814,
														"isOffset": false,
														"isSlot": false,
														"src": "9809:7:6",
														"valueSize": 1
													},
													{
														"declaration": 806,
														"isOffset": false,
														"isSlot": false,
														"src": "9832:5:6",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 822,
												"nodeType": "InlineAssembly",
												"src": "9770:199:6"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 823,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 814,
														"src": "9985:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 826,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 824,
																		"name": "returnSize",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 817,
																		"src": "9997:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 825,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10011:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "9997:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 837,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 835,
																		"name": "returnValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 820,
																		"src": "10048:11:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 836,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10063:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "10048:16:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 838,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "9997:67:6",
																"trueExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 834,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 829,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 806,
																						"src": "10023:5:6",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$380",
																							"typeString": "contract IERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_IERC20_$380",
																							"typeString": "contract IERC20"
																						}
																					],
																					"id": 828,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "10015:7:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 827,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "10015:7:6",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 830,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10015:14:6",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 831,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "10030:4:6",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "10015:19:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 832,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10035:6:6",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "10015:26:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 833,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10044:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "10015:30:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 839,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9996:69:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9985:80:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 812,
												"id": 841,
												"nodeType": "Return",
												"src": "9978:87:6"
											}
										]
									},
									"documentation": {
										"id": 803,
										"nodeType": "StructuredDocumentation",
										"src": "9096:491:6",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."
									},
									"id": 843,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "9601:23:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9632:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "9625:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 805,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 804,
														"name": "IERC20",
														"nameLocations": [
															"9625:6:6"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "9625:6:6"
													},
													"referencedDeclaration": 380,
													"src": "9625:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 808,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9652:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "9639:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 807,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9639:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9624:33:6"
									},
									"returnParameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "9675:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 810,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9675:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9674:6:6"
									},
									"scope": 844,
									"src": "9592:480:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 845,
							"src": "698:9376:6",
							"usedErrors": [
								392,
								401
							],
							"usedEvents": []
						}
					],
					"src": "115:9960:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							874
						]
					},
					"id": 875,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 846,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 847,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 874,
							"linearizedBaseContracts": [
								874
							],
							"name": "Context",
							"nameLocation": "642:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 855,
										"nodeType": "Block",
										"src": "718:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 852,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 853,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:7",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 851,
												"id": 854,
												"nodeType": "Return",
												"src": "728:17:7"
											}
										]
									},
									"id": 856,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:7"
									},
									"returnParameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 856,
												"src": "709:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 849,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:7"
									},
									"scope": 874,
									"src": "656:96:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 864,
										"nodeType": "Block",
										"src": "825:32:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 861,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 862,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:7",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 860,
												"id": 863,
												"nodeType": "Return",
												"src": "835:15:7"
											}
										]
									},
									"id": 865,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:7"
									},
									"returnParameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 859,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 865,
												"src": "809:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 858,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:7"
									},
									"scope": 874,
									"src": "758:99:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 872,
										"nodeType": "Block",
										"src": "935:25:7",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 870,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:7",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 869,
												"id": 871,
												"nodeType": "Return",
												"src": "945:8:7"
											}
										]
									},
									"id": 873,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 866,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:7"
									},
									"returnParameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 868,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 873,
												"src": "926:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 867,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:7"
									},
									"scope": 874,
									"src": "863:97:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 875,
							"src": "624:338:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							886
						]
					},
					"id": 887,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 876,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".16"
							],
							"nodeType": "PragmaDirective",
							"src": "115:25:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 877,
								"nodeType": "StructuredDocumentation",
								"src": "142:280:8",
								"text": " @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 886,
							"linearizedBaseContracts": [
								886
							],
							"name": "IERC165",
							"nameLocation": "433:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 878,
										"nodeType": "StructuredDocumentation",
										"src": "447:340:8",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 885,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "801:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "826:11:8",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "819:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 879,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "819:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:20:8"
									},
									"returnParameters": {
										"id": 884,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 883,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "862:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 882,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "862:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "861:6:8"
									},
									"scope": 886,
									"src": "792:76:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 887,
							"src": "423:447:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:756:8"
				},
				"id": 8
			},
			"Bulksender.sol": {
				"ast": {
					"absolutePath": "Bulksender.sol",
					"exportedSymbols": {
						"Context": [
							874
						],
						"IERC1363": [
							229
						],
						"IERC20": [
							380
						],
						"Ownable": [
							147
						],
						"RainDrop": [
							1311
						],
						"ReentrancyGuard": [
							302
						],
						"SafeERC20": [
							844
						]
					},
					"id": 1312,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 888,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:9"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 889,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1312,
							"sourceUnit": 148,
							"src": "58:52:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 890,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1312,
							"sourceUnit": 303,
							"src": "111:62:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 891,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1312,
							"sourceUnit": 845,
							"src": "174:65:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 892,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1312,
							"sourceUnit": 381,
							"src": "240:56:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 894,
										"name": "Ownable",
										"nameLocations": [
											"497:7:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "497:7:9"
									},
									"id": 895,
									"nodeType": "InheritanceSpecifier",
									"src": "497:7:9"
								},
								{
									"baseName": {
										"id": 896,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"506:15:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 302,
										"src": "506:15:9"
									},
									"id": 897,
									"nodeType": "InheritanceSpecifier",
									"src": "506:15:9"
								}
							],
							"canonicalName": "RainDrop",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 893,
								"nodeType": "StructuredDocumentation",
								"src": "298:178:9",
								"text": "@title RainDrop\n @notice Send ETH or ERC20 tokens to many recipients in one tx.\n @dev ERC20 bulk transfer uses transferFrom, so users must approve this contract first."
							},
							"fullyImplemented": true,
							"id": 1311,
							"linearizedBaseContracts": [
								1311,
								302,
								147,
								874
							],
							"name": "RainDrop",
							"nameLocation": "485:8:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 901,
									"libraryName": {
										"id": 898,
										"name": "SafeERC20",
										"nameLocations": [
											"534:9:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 844,
										"src": "534:9:9"
									},
									"nodeType": "UsingForDirective",
									"src": "528:27:9",
									"typeName": {
										"id": 900,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 899,
											"name": "IERC20",
											"nameLocations": [
												"548:6:9"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 380,
											"src": "548:6:9"
										},
										"referencedDeclaration": 380,
										"src": "548:6:9",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$380",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"anonymous": false,
									"eventSelector": "45d6845dd4f0bdd735a522e3076f82702e80547a0e2b1304a2e483bca6d9cdc4",
									"id": 909,
									"name": "BulkETHTransferred",
									"nameLocation": "567:18:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 908,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 903,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "602:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "586:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 902,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "586:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 905,
												"indexed": false,
												"mutability": "mutable",
												"name": "total",
												"nameLocation": "618:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "610:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 904,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "610:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipientsCount",
												"nameLocation": "633:15:9",
												"nodeType": "VariableDeclaration",
												"scope": 909,
												"src": "625:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 906,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "625:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "585:64:9"
									},
									"src": "561:89:9"
								},
								{
									"anonymous": false,
									"eventSelector": "8a88ad5eb4d4acfb8c47fcc9c5b0e66c5162ea704dd1e08cce235927434e18d2",
									"id": 919,
									"name": "BulkERC20Transferred",
									"nameLocation": "661:20:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 911,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "698:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "682:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 910,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 913,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "721:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "705:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 912,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "705:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 915,
												"indexed": false,
												"mutability": "mutable",
												"name": "total",
												"nameLocation": "737:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "729:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 914,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "729:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 917,
												"indexed": false,
												"mutability": "mutable",
												"name": "recipientsCount",
												"nameLocation": "752:15:9",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "744:23:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 916,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "744:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "681:87:9"
									},
									"src": "655:114:9"
								},
								{
									"anonymous": false,
									"eventSelector": "94b2de810873337ed265c5f8cf98c9cffefa06b8607f9a2f1fbaebdfbcfbef1c",
									"id": 925,
									"name": "ETHWithdrawn",
									"nameLocation": "780:12:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "809:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 925,
												"src": "793:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 920,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "793:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "821:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 925,
												"src": "813:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "813:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:36:9"
									},
									"src": "774:55:9"
								},
								{
									"anonymous": false,
									"eventSelector": "bfed55bdcd242e3dd0f60ddd7d1e87c67f61c34cd9527b3e6455d841b1025362",
									"id": 933,
									"name": "ERC20Withdrawn",
									"nameLocation": "840:14:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "871:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "855:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 926,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "855:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 929,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "894:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "878:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 928,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "878:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 931,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "906:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "898:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "898:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "854:59:9"
									},
									"src": "834:80:9"
								},
								{
									"body": {
										"id": 940,
										"nodeType": "Block",
										"src": "956:3:9",
										"statements": []
									},
									"id": 941,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"expression": {
														"id": 936,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "944:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 937,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "948:6:9",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "944:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 938,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 935,
												"name": "Ownable",
												"nameLocations": [
													"936:7:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "936:7:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "936:19:9"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 934,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "933:2:9"
									},
									"returnParameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "956:0:9"
									},
									"scope": 1311,
									"src": "922:37:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1033,
										"nodeType": "Block",
										"src": "1409:543:9",
										"statements": [
											{
												"assignments": [
													954
												],
												"declarations": [
													{
														"constant": false,
														"id": 954,
														"mutability": "mutable",
														"name": "n",
														"nameLocation": "1427:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 1033,
														"src": "1419:9:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 953,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1419:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 957,
												"initialValue": {
													"expression": {
														"id": 955,
														"name": "recipients",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 945,
														"src": "1431:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
															"typeString": "address[] calldata"
														}
													},
													"id": 956,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1442:6:9",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "1431:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1419:29:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 962,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 959,
																"name": "n",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 954,
																"src": "1466:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 960,
																	"name": "amounts",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 948,
																	"src": "1471:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 961,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1479:6:9",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1471:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1466:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6c656e6774682d6d69736d61746368",
															"id": 963,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1487:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_de8e3464a6f953d7c88413d1e5ad8b13ba277be3f42ee326a98c5cbafed36f1d",
																"typeString": "literal_string \"length-mismatch\""
															},
															"value": "length-mismatch"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_de8e3464a6f953d7c88413d1e5ad8b13ba277be3f42ee326a98c5cbafed36f1d",
																"typeString": "literal_string \"length-mismatch\""
															}
														],
														"id": 958,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1458:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1458:47:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 965,
												"nodeType": "ExpressionStatement",
												"src": "1458:47:9"
											},
											{
												"assignments": [
													967
												],
												"declarations": [
													{
														"constant": false,
														"id": 967,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "1523:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1033,
														"src": "1515:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 966,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1515:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 969,
												"initialValue": {
													"hexValue": "30",
													"id": 968,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1531:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1515:17:9"
											},
											{
												"body": {
													"id": 986,
													"nodeType": "Block",
													"src": "1602:44:9",
													"statements": [
														{
															"expression": {
																"id": 984,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 980,
																	"name": "total",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 967,
																	"src": "1616:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 981,
																		"name": "amounts",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 948,
																		"src": "1625:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		}
																	},
																	"id": 983,
																	"indexExpression": {
																		"id": 982,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 971,
																		"src": "1633:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1625:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1616:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 985,
															"nodeType": "ExpressionStatement",
															"src": "1616:19:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 976,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 974,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 971,
														"src": "1590:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 975,
														"name": "n",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 954,
														"src": "1594:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1590:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 987,
												"initializationExpression": {
													"assignments": [
														971
													],
													"declarations": [
														{
															"constant": false,
															"id": 971,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1583:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 987,
															"src": "1575:9:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 970,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1575:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 973,
													"initialValue": {
														"hexValue": "30",
														"id": 972,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1587:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1575:13:9"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 978,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "1597:3:9",
														"subExpression": {
															"id": 977,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 971,
															"src": "1599:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 979,
													"nodeType": "ExpressionStatement",
													"src": "1597:3:9"
												},
												"nodeType": "ForStatement",
												"src": "1570:76:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 992,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 989,
																"name": "total",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 967,
																"src": "1664:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 990,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1673:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 991,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1677:5:9",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "1673:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1664:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "76616c75652d6d69736d61746368",
															"id": 993,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1684:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc88e57dc80be025bfe09afbca2cd1f527cb24e266aaafb93419be205c17fd16",
																"typeString": "literal_string \"value-mismatch\""
															},
															"value": "value-mismatch"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc88e57dc80be025bfe09afbca2cd1f527cb24e266aaafb93419be205c17fd16",
																"typeString": "literal_string \"value-mismatch\""
															}
														],
														"id": 988,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1656:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 994,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1656:45:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 995,
												"nodeType": "ExpressionStatement",
												"src": "1656:45:9"
											},
											{
												"body": {
													"id": 1024,
													"nodeType": "Block",
													"src": "1766:124:9",
													"statements": [
														{
															"assignments": [
																1007,
																null
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1007,
																	"mutability": "mutable",
																	"name": "ok",
																	"nameLocation": "1786:2:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 1024,
																	"src": "1781:7:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"typeName": {
																		"id": 1006,
																		"name": "bool",
																		"nodeType": "ElementaryTypeName",
																		"src": "1781:4:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"visibility": "internal"
																},
																null
															],
															"id": 1018,
															"initialValue": {
																"arguments": [
																	{
																		"hexValue": "",
																		"id": 1016,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1832:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		},
																		"value": ""
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																			"typeString": "literal_string \"\""
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																				"typeString": "literal_string \"\""
																			}
																		],
																		"expression": {
																			"baseExpression": {
																				"id": 1008,
																				"name": "recipients",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 945,
																				"src": "1794:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																					"typeString": "address[] calldata"
																				}
																			},
																			"id": 1010,
																			"indexExpression": {
																				"id": 1009,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 997,
																				"src": "1805:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "1794:13:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"id": 1011,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1808:4:9",
																		"memberName": "call",
																		"nodeType": "MemberAccess",
																		"src": "1794:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																		}
																	},
																	"id": 1015,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"names": [
																		"value"
																	],
																	"nodeType": "FunctionCallOptions",
																	"options": [
																		{
																			"baseExpression": {
																				"id": 1012,
																				"name": "amounts",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 948,
																				"src": "1820:7:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																					"typeString": "uint256[] calldata"
																				}
																			},
																			"id": 1014,
																			"indexExpression": {
																				"id": 1013,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 997,
																				"src": "1828:1:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "1820:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"src": "1794:37:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
																		"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
																	}
																},
																"id": 1017,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1794:41:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
																	"typeString": "tuple(bool,bytes memory)"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "1780:55:9"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1020,
																		"name": "ok",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1007,
																		"src": "1857:2:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "6574682d73656e642d6661696c6564",
																		"id": 1021,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1861:17:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_f12c488a23a22a5ef0e34ac4c3b8a552738eb834b777e83839a622bf4d805954",
																			"typeString": "literal_string \"eth-send-failed\""
																		},
																		"value": "eth-send-failed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_f12c488a23a22a5ef0e34ac4c3b8a552738eb834b777e83839a622bf4d805954",
																			"typeString": "literal_string \"eth-send-failed\""
																		}
																	],
																	"id": 1019,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "1849:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1022,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1849:30:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1023,
															"nodeType": "ExpressionStatement",
															"src": "1849:30:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1002,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1000,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 997,
														"src": "1754:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1001,
														"name": "n",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 954,
														"src": "1758:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1754:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1025,
												"initializationExpression": {
													"assignments": [
														997
													],
													"declarations": [
														{
															"constant": false,
															"id": 997,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1747:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 1025,
															"src": "1739:9:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 996,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1739:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 999,
													"initialValue": {
														"hexValue": "30",
														"id": 998,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1751:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1739:13:9"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1004,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "1761:3:9",
														"subExpression": {
															"id": 1003,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 997,
															"src": "1763:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1005,
													"nodeType": "ExpressionStatement",
													"src": "1761:3:9"
												},
												"nodeType": "ForStatement",
												"src": "1734:156:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1027,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1924:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1028,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1928:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1924:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1029,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 967,
															"src": "1936:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1030,
															"name": "n",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 954,
															"src": "1943:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1026,
														"name": "BulkETHTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 909,
														"src": "1905:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256)"
														}
													},
													"id": 1031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1905:40:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1032,
												"nodeType": "EmitStatement",
												"src": "1900:45:9"
											}
										]
									},
									"documentation": {
										"id": 942,
										"nodeType": "StructuredDocumentation",
										"src": "964:298:9",
										"text": "@notice Batch-send ETH to many recipients.\n @param recipients Array of recipient addresses.\n @param amounts Array of amounts corresponding to each recipient (in wei).\n Requirements:\n - `recipients.length == amounts.length`\n - sum(amounts) must equal msg.value"
									},
									"functionSelector": "b874fa6a",
									"id": 1034,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 951,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 950,
												"name": "nonReentrant",
												"nameLocations": [
													"1392:12:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "1392:12:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1392:12:9"
										}
									],
									"name": "bulkTransferETH",
									"nameLocation": "1276:15:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "recipients",
												"nameLocation": "1311:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "1292:29:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 943,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1292:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 944,
													"nodeType": "ArrayTypeName",
													"src": "1292:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "1342:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1034,
												"src": "1323:26:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 946,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1323:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 947,
													"nodeType": "ArrayTypeName",
													"src": "1323:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1291:59:9"
									},
									"returnParameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1409:0:9"
									},
									"scope": 1311,
									"src": "1267:685:9",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1120,
										"nodeType": "Block",
										"src": "2486:466:9",
										"statements": [
											{
												"assignments": [
													1050
												],
												"declarations": [
													{
														"constant": false,
														"id": 1050,
														"mutability": "mutable",
														"name": "n",
														"nameLocation": "2504:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 1120,
														"src": "2496:9:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1049,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2496:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1053,
												"initialValue": {
													"expression": {
														"id": 1051,
														"name": "recipients",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1041,
														"src": "2508:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
															"typeString": "address[] calldata"
														}
													},
													"id": 1052,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2519:6:9",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "2508:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2496:29:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1058,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1055,
																"name": "n",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1050,
																"src": "2543:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1056,
																	"name": "amounts",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1044,
																	"src": "2548:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 1057,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2556:6:9",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "2548:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2543:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6c656e6774682d6d69736d61746368",
															"id": 1059,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2564:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_de8e3464a6f953d7c88413d1e5ad8b13ba277be3f42ee326a98c5cbafed36f1d",
																"typeString": "literal_string \"length-mismatch\""
															},
															"value": "length-mismatch"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_de8e3464a6f953d7c88413d1e5ad8b13ba277be3f42ee326a98c5cbafed36f1d",
																"typeString": "literal_string \"length-mismatch\""
															}
														],
														"id": 1054,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2535:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1060,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2535:47:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1061,
												"nodeType": "ExpressionStatement",
												"src": "2535:47:9"
											},
											{
												"assignments": [
													1063
												],
												"declarations": [
													{
														"constant": false,
														"id": 1063,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "2601:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1120,
														"src": "2593:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1062,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2593:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1065,
												"initialValue": {
													"hexValue": "30",
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2609:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2593:17:9"
											},
											{
												"body": {
													"id": 1082,
													"nodeType": "Block",
													"src": "2652:44:9",
													"statements": [
														{
															"expression": {
																"id": 1080,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1076,
																	"name": "total",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1063,
																	"src": "2666:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1077,
																		"name": "amounts",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1044,
																		"src": "2675:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		}
																	},
																	"id": 1079,
																	"indexExpression": {
																		"id": 1078,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1067,
																		"src": "2683:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2675:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2666:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1081,
															"nodeType": "ExpressionStatement",
															"src": "2666:19:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1070,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1067,
														"src": "2640:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1071,
														"name": "n",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1050,
														"src": "2644:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2640:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1083,
												"initializationExpression": {
													"assignments": [
														1067
													],
													"declarations": [
														{
															"constant": false,
															"id": 1067,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2633:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 1083,
															"src": "2625:9:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1066,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2625:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1069,
													"initialValue": {
														"hexValue": "30",
														"id": 1068,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2637:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2625:13:9"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1074,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "2647:3:9",
														"subExpression": {
															"id": 1073,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1067,
															"src": "2649:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1075,
													"nodeType": "ExpressionStatement",
													"src": "2647:3:9"
												},
												"nodeType": "ForStatement",
												"src": "2620:76:9"
											},
											{
												"body": {
													"id": 1107,
													"nodeType": "Block",
													"src": "2786:86:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1097,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2823:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1098,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2827:6:9",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2823:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 1099,
																			"name": "recipients",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1041,
																			"src": "2835:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																				"typeString": "address[] calldata"
																			}
																		},
																		"id": 1101,
																		"indexExpression": {
																			"id": 1100,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1085,
																			"src": "2846:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2835:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 1102,
																			"name": "amounts",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1044,
																			"src": "2850:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																				"typeString": "uint256[] calldata"
																			}
																		},
																		"id": 1104,
																		"indexExpression": {
																			"id": 1103,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1085,
																			"src": "2858:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2850:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1094,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1038,
																		"src": "2800:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1096,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2806:16:9",
																	"memberName": "safeTransferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 452,
																	"src": "2800:22:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$380_$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1105,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2800:61:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1106,
															"nodeType": "ExpressionStatement",
															"src": "2800:61:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1090,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1088,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1085,
														"src": "2774:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1089,
														"name": "n",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1050,
														"src": "2778:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2774:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1108,
												"initializationExpression": {
													"assignments": [
														1085
													],
													"declarations": [
														{
															"constant": false,
															"id": 1085,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2767:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 1108,
															"src": "2759:9:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1084,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2759:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1087,
													"initialValue": {
														"hexValue": "30",
														"id": 1086,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2771:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2759:13:9"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1092,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "2781:3:9",
														"subExpression": {
															"id": 1091,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1085,
															"src": "2783:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1093,
													"nodeType": "ExpressionStatement",
													"src": "2781:3:9"
												},
												"nodeType": "ForStatement",
												"src": "2754:118:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1112,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1038,
																	"src": "2916:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1111,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2908:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1110,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2908:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2908:14:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1114,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2924:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1115,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2928:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2924:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1116,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1063,
															"src": "2936:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1117,
															"name": "n",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1050,
															"src": "2943:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1109,
														"name": "BulkERC20Transferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 919,
														"src": "2887:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2887:58:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1119,
												"nodeType": "EmitStatement",
												"src": "2882:63:9"
											}
										]
									},
									"documentation": {
										"id": 1035,
										"nodeType": "StructuredDocumentation",
										"src": "1958:371:9",
										"text": "@notice Batch-send ERC20 tokens to many recipients using transferFrom.\n @param token ERC20 token contract.\n @param recipients Array of recipient addresses.\n @param amounts Array of amounts corresponding to each recipient (in token units).\n Requirements:\n - caller must approve this contract for at least sum(amounts) before calling."
									},
									"functionSelector": "3e46cd53",
									"id": 1121,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1047,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1046,
												"name": "nonReentrant",
												"nameLocations": [
													"2473:12:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "2473:12:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2473:12:9"
										}
									],
									"name": "bulkTransferERC20",
									"nameLocation": "2343:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2377:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "2370:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1037,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1036,
														"name": "IERC20",
														"nameLocations": [
															"2370:6:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "2370:6:9"
													},
													"referencedDeclaration": 380,
													"src": "2370:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1041,
												"mutability": "mutable",
												"name": "recipients",
												"nameLocation": "2411:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "2392:29:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1039,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "2392:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1040,
													"nodeType": "ArrayTypeName",
													"src": "2392:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "2450:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "2431:26:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1042,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "2431:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1043,
													"nodeType": "ArrayTypeName",
													"src": "2431:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2360:103:9"
									},
									"returnParameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2486:0:9"
									},
									"scope": 1311,
									"src": "2334:618:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1226,
										"nodeType": "Block",
										"src": "3232:540:9",
										"statements": [
											{
												"assignments": [
													1139
												],
												"declarations": [
													{
														"constant": false,
														"id": 1139,
														"mutability": "mutable",
														"name": "n",
														"nameLocation": "3250:1:9",
														"nodeType": "VariableDeclaration",
														"scope": 1226,
														"src": "3242:9:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1138,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3242:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1142,
												"initialValue": {
													"expression": {
														"id": 1140,
														"name": "recipients",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1128,
														"src": "3254:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
															"typeString": "address[] calldata"
														}
													},
													"id": 1141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3265:6:9",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "3254:17:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3242:29:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1144,
																"name": "n",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1139,
																"src": "3289:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1145,
																	"name": "amounts",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1131,
																	"src": "3294:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 1146,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3302:6:9",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "3294:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3289:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6c656e6774682d6d69736d61746368",
															"id": 1148,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3310:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_de8e3464a6f953d7c88413d1e5ad8b13ba277be3f42ee326a98c5cbafed36f1d",
																"typeString": "literal_string \"length-mismatch\""
															},
															"value": "length-mismatch"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_de8e3464a6f953d7c88413d1e5ad8b13ba277be3f42ee326a98c5cbafed36f1d",
																"typeString": "literal_string \"length-mismatch\""
															}
														],
														"id": 1143,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3281:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3281:47:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1150,
												"nodeType": "ExpressionStatement",
												"src": "3281:47:9"
											},
											{
												"assignments": [
													1152
												],
												"declarations": [
													{
														"constant": false,
														"id": 1152,
														"mutability": "mutable",
														"name": "total",
														"nameLocation": "3347:5:9",
														"nodeType": "VariableDeclaration",
														"scope": 1226,
														"src": "3339:13:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1151,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3339:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1154,
												"initialValue": {
													"hexValue": "30",
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3355:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3339:17:9"
											},
											{
												"body": {
													"id": 1171,
													"nodeType": "Block",
													"src": "3398:44:9",
													"statements": [
														{
															"expression": {
																"id": 1169,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1165,
																	"name": "total",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1152,
																	"src": "3412:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1166,
																		"name": "amounts",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1131,
																		"src": "3421:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																			"typeString": "uint256[] calldata"
																		}
																	},
																	"id": 1168,
																	"indexExpression": {
																		"id": 1167,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1156,
																		"src": "3429:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "3421:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3412:19:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1170,
															"nodeType": "ExpressionStatement",
															"src": "3412:19:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1159,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1156,
														"src": "3386:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1160,
														"name": "n",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1139,
														"src": "3390:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3386:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1172,
												"initializationExpression": {
													"assignments": [
														1156
													],
													"declarations": [
														{
															"constant": false,
															"id": 1156,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "3379:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 1172,
															"src": "3371:9:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1155,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3371:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1158,
													"initialValue": {
														"hexValue": "30",
														"id": 1157,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3383:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "3371:13:9"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1163,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "3393:3:9",
														"subExpression": {
															"id": 1162,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1156,
															"src": "3395:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1164,
													"nodeType": "ExpressionStatement",
													"src": "3393:3:9"
												},
												"nodeType": "ForStatement",
												"src": "3366:76:9"
											},
											{
												"assignments": [
													1174
												],
												"declarations": [
													{
														"constant": false,
														"id": 1174,
														"mutability": "mutable",
														"name": "contractBal",
														"nameLocation": "3460:11:9",
														"nodeType": "VariableDeclaration",
														"scope": 1226,
														"src": "3452:19:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1173,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3452:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1182,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1179,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3498:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_RainDrop_$1311",
																		"typeString": "contract RainDrop"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_RainDrop_$1311",
																		"typeString": "contract RainDrop"
																	}
																],
																"id": 1178,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3490:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1177,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3490:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1180,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3490:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1175,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1125,
															"src": "3474:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														"id": 1176,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3480:9:9",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 337,
														"src": "3474:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3474:30:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3452:52:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1184,
																"name": "contractBal",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1174,
																"src": "3522:11:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1185,
																"name": "total",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1152,
																"src": "3537:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3522:20:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e73756666696369656e742d636f6e74726163742d62616c616e6365",
															"id": 1187,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3544:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d63fdbed4427467445645d3049f905a5792b7d28d81f2510cffd5333dc77e0e4",
																"typeString": "literal_string \"insufficient-contract-balance\""
															},
															"value": "insufficient-contract-balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d63fdbed4427467445645d3049f905a5792b7d28d81f2510cffd5333dc77e0e4",
																"typeString": "literal_string \"insufficient-contract-balance\""
															}
														],
														"id": 1183,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3514:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1188,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3514:62:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1189,
												"nodeType": "ExpressionStatement",
												"src": "3514:62:9"
											},
											{
												"body": {
													"id": 1211,
													"nodeType": "Block",
													"src": "3619:70:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 1203,
																			"name": "recipients",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1128,
																			"src": "3652:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																				"typeString": "address[] calldata"
																			}
																		},
																		"id": 1205,
																		"indexExpression": {
																			"id": 1204,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1191,
																			"src": "3663:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3652:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 1206,
																			"name": "amounts",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1131,
																			"src": "3667:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																				"typeString": "uint256[] calldata"
																			}
																		},
																		"id": 1208,
																		"indexExpression": {
																			"id": 1207,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1191,
																			"src": "3675:1:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3667:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1200,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1125,
																		"src": "3633:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$380",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1202,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3639:12:9",
																	"memberName": "safeTransfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 425,
																	"src": "3633:18:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$380_$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3633:45:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1210,
															"nodeType": "ExpressionStatement",
															"src": "3633:45:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1194,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1191,
														"src": "3607:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1195,
														"name": "n",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1139,
														"src": "3611:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3607:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1212,
												"initializationExpression": {
													"assignments": [
														1191
													],
													"declarations": [
														{
															"constant": false,
															"id": 1191,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "3600:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 1212,
															"src": "3592:9:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1190,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "3592:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1193,
													"initialValue": {
														"hexValue": "30",
														"id": 1192,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3604:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "3592:13:9"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1198,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "3614:3:9",
														"subExpression": {
															"id": 1197,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1191,
															"src": "3616:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1199,
													"nodeType": "ExpressionStatement",
													"src": "3614:3:9"
												},
												"nodeType": "ForStatement",
												"src": "3587:102:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1216,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1125,
																	"src": "3733:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1215,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3725:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1214,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3725:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1217,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3725:14:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1220,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3749:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_RainDrop_$1311",
																		"typeString": "contract RainDrop"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_RainDrop_$1311",
																		"typeString": "contract RainDrop"
																	}
																],
																"id": 1219,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3741:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1218,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3741:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1221,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3741:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1222,
															"name": "total",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1152,
															"src": "3756:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1223,
															"name": "n",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1139,
															"src": "3763:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1213,
														"name": "BulkERC20Transferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 919,
														"src": "3704:20:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3704:61:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1225,
												"nodeType": "EmitStatement",
												"src": "3699:66:9"
											}
										]
									},
									"documentation": {
										"id": 1122,
										"nodeType": "StructuredDocumentation",
										"src": "2958:95:9",
										"text": "@notice Owner-only: send ERC20 tokens that are already held by this contract to recipients."
									},
									"functionSelector": "9f62eafe",
									"id": 1227,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1134,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1133,
												"name": "onlyOwner",
												"nameLocations": [
													"3209:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "3209:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "3209:9:9"
										},
										{
											"id": 1136,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1135,
												"name": "nonReentrant",
												"nameLocations": [
													"3219:12:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "3219:12:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "3219:12:9"
										}
									],
									"name": "bulkTransferERC20FromContract",
									"nameLocation": "3067:29:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3113:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1227,
												"src": "3106:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1124,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1123,
														"name": "IERC20",
														"nameLocations": [
															"3106:6:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "3106:6:9"
													},
													"referencedDeclaration": 380,
													"src": "3106:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1128,
												"mutability": "mutable",
												"name": "recipients",
												"nameLocation": "3147:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1227,
												"src": "3128:29:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1126,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "3128:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1127,
													"nodeType": "ArrayTypeName",
													"src": "3128:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "3186:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1227,
												"src": "3167:26:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1129,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3167:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1130,
													"nodeType": "ArrayTypeName",
													"src": "3167:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3096:103:9"
									},
									"returnParameters": {
										"id": 1137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3232:0:9"
									},
									"scope": 1311,
									"src": "3058:714:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1269,
										"nodeType": "Block",
										"src": "3945:206:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1246,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1242,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3971:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_RainDrop_$1311",
																				"typeString": "contract RainDrop"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_RainDrop_$1311",
																				"typeString": "contract RainDrop"
																			}
																		],
																		"id": 1241,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3963:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1240,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3963:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1243,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3963:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1244,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3977:7:9",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "3963:21:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1245,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1232,
																"src": "3988:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3963:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e73756666696369656e742d657468",
															"id": 1247,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3996:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_32f2af800164601bd8ed4b85bf247cb53750152b9e1fc05cbced958558411142",
																"typeString": "literal_string \"insufficient-eth\""
															},
															"value": "insufficient-eth"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_32f2af800164601bd8ed4b85bf247cb53750152b9e1fc05cbced958558411142",
																"typeString": "literal_string \"insufficient-eth\""
															}
														],
														"id": 1239,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3955:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3955:60:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1249,
												"nodeType": "ExpressionStatement",
												"src": "3955:60:9"
											},
											{
												"assignments": [
													1251,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1251,
														"mutability": "mutable",
														"name": "ok",
														"nameLocation": "4031:2:9",
														"nodeType": "VariableDeclaration",
														"scope": 1269,
														"src": "4026:7:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1250,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4026:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1258,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1256,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4062:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1252,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1230,
																"src": "4039:2:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4042:4:9",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "4039:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1254,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1232,
																"src": "4054:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "4039:22:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4039:26:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4025:40:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1260,
															"name": "ok",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1251,
															"src": "4083:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "77697468647261772d6661696c6564",
															"id": 1261,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4087:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8b43d355e049cab583890bb85706334dd851ea9c087cc2a88fabf6a4dae5875e",
																"typeString": "literal_string \"withdraw-failed\""
															},
															"value": "withdraw-failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8b43d355e049cab583890bb85706334dd851ea9c087cc2a88fabf6a4dae5875e",
																"typeString": "literal_string \"withdraw-failed\""
															}
														],
														"id": 1259,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4075:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4075:30:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1263,
												"nodeType": "ExpressionStatement",
												"src": "4075:30:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1265,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1230,
															"src": "4133:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1266,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1232,
															"src": "4137:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1264,
														"name": "ETHWithdrawn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 925,
														"src": "4120:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4120:24:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1268,
												"nodeType": "EmitStatement",
												"src": "4115:29:9"
											}
										]
									},
									"documentation": {
										"id": 1228,
										"nodeType": "StructuredDocumentation",
										"src": "3778:73:9",
										"text": "@notice Owner helper: withdraw ETH accidentally left in the contract."
									},
									"functionSelector": "4782f779",
									"id": 1270,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1235,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1234,
												"name": "onlyOwner",
												"nameLocations": [
													"3922:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "3922:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "3922:9:9"
										},
										{
											"id": 1237,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1236,
												"name": "nonReentrant",
												"nameLocations": [
													"3932:12:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "3932:12:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "3932:12:9"
										}
									],
									"name": "withdrawETH",
									"nameLocation": "3865:11:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3893:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "3877:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1229,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3877:15:9",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1232,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3905:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "3897:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3897:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3876:36:9"
									},
									"returnParameters": {
										"id": 1238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3945:0:9"
									},
									"scope": 1311,
									"src": "3856:295:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1301,
										"nodeType": "Block",
										"src": "4325:104:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1288,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1276,
															"src": "4354:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1289,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1278,
															"src": "4358:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1285,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1274,
															"src": "4335:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$380",
																"typeString": "contract IERC20"
															}
														},
														"id": 1287,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4341:12:9",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 425,
														"src": "4335:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$380_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$380_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4335:30:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1291,
												"nodeType": "ExpressionStatement",
												"src": "4335:30:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1295,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1274,
																	"src": "4403:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$380",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4395:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1293,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4395:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 1296,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4395:14:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1297,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1276,
															"src": "4411:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1298,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1278,
															"src": "4415:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1292,
														"name": "ERC20Withdrawn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 933,
														"src": "4380:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4380:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1300,
												"nodeType": "EmitStatement",
												"src": "4375:47:9"
											}
										]
									},
									"documentation": {
										"id": 1271,
										"nodeType": "StructuredDocumentation",
										"src": "4157:66:9",
										"text": "@notice Owner helper: withdraw ERC20 tokens from the contract."
									},
									"functionSelector": "44004cc1",
									"id": 1302,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1281,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1280,
												"name": "onlyOwner",
												"nameLocations": [
													"4302:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "4302:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "4302:9:9"
										},
										{
											"id": 1283,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1282,
												"name": "nonReentrant",
												"nameLocations": [
													"4312:12:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 267,
												"src": "4312:12:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "4312:12:9"
										}
									],
									"name": "withdrawERC20",
									"nameLocation": "4237:13:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1274,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4258:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "4251:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$380",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1273,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1272,
														"name": "IERC20",
														"nameLocations": [
															"4251:6:9"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 380,
														"src": "4251:6:9"
													},
													"referencedDeclaration": 380,
													"src": "4251:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$380",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1276,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4273:2:9",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "4265:10:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1275,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4265:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1278,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4285:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "4277:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4277:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4250:42:9"
									},
									"returnParameters": {
										"id": 1284,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4325:0:9"
									},
									"scope": 1311,
									"src": "4228:201:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1305,
										"nodeType": "Block",
										"src": "4499:2:9",
										"statements": []
									},
									"id": 1306,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4479:2:9"
									},
									"returnParameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4499:0:9"
									},
									"scope": 1311,
									"src": "4472:29:9",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1309,
										"nodeType": "Block",
										"src": "4534:2:9",
										"statements": []
									},
									"id": 1310,
									"implemented": true,
									"kind": "fallback",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4514:2:9"
									},
									"returnParameters": {
										"id": 1308,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4534:0:9"
									},
									"scope": 1311,
									"src": "4506:30:9",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1312,
							"src": "476:4062:9",
							"usedErrors": [
								13,
								18,
								392
							],
							"usedEvents": [
								24,
								909,
								919,
								925,
								933
							]
						}
					],
					"src": "32:4507:9"
				},
				"id": 9
			}
		}
	}
}